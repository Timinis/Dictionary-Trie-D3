{"version":3,"sources":["assets/node.png","assets/edge.jpg","D3Mounter/D3Mounter.js","components/Home/FrontPageBackground/frontPageBackground.tsx","components/Home/Home.tsx","sharedTypes.ts","components/Navbar/Navbar.tsx","components/Grapher/Grapher.tsx","components/Grapher/GrapherAction.tsx","components/Examples/GDP.tsx","App.js","serviceWorker.js","store/reducer/graphReducer.ts","store/middleware/reporter.ts","index.js","store/index.ts"],"names":["module","exports","__webpack_require__","p","simulationCreator","inputNodeArr","inputEdgesArr","height","width","D3","force","distance","id","d","radius","enterNode","selection","nodesArray","themeColor","dragFunction","classed","append","attr","selectAll","data","join","style","call","enterText","inputNodesArray","text","enterLink","inputEdgesArray","Math","sqrt","value","restartGraph","nodeSelection","newInputNodeArr","linkSelection","newInputEdgeArr","textSelection","simulationSelector","nodes","links","alpha","restart","exit","remove","enter","merge","source","target","SvgComponent","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","myRef","componentDidMount","current","edgesArray","copyNodes","map","element","JSON","parse","stringify","copyEdges","d3Graph","baseVal","simulation","svgMounter","drag","on","active","alphaTarget","fx","x","fy","y","node","link","intervalId","window","setInterval","length","randomGenerated","random","toString","randomTarget","floor","otherRandom","concat","toConsumableArray","newGraph","setState","state","React","createRef","react_default","a","createElement","ref","clearInterval","d3Timer","stop","Component","Home","className","react_router_dom","to","frontPageBackground","isD3Target","maybeD3Source","hasOwnProperty","NavBar","color","i","push","console","log","strength","fill","Grapher","graph","d3node","d3link","d3text","handleChange","event","_event$target","name","defineProperty","nodeListVis","preventDefault","node_list_visibility","nodeFormVis","node_form_visibility","edgeListVis","edge_list_visibility","edgeFormVis","edge_form_visibility","handleNodeSubmit","reducerData","uniqueId","Set","forEach","add","node_id_message","node_id","has","postData","addNode","newGraphSelection","handleEdgeSubmit","edge_source_message","edge_target_message","edge_weight_message","edge_source","edge_weight","edge_target","addEdge","_this2","Navbar_Navbar","onClick","index","src","nodeIMG","key","htmlFor","type","onChange","edgeIMG","min","connect","reducerState","dispatch","newNode","payload","newEdge","GDPSvg","countryInfo","Map","gdpJSON","set","country","gdp","countryCategories","countryJSON","countryObj","get","iso2Code","cluster","region","arrayOfCountries","filteredCountries","filter","cbrt","tooltip","App","document","title","react_router","path","exact","component","GDP","Boolean","location","hostname","match","ActionTypes","reporter","store","next","action","result","getState","err","error","initialState","graphReducer","arguments","undefined","GraphAddNode","objectSpread","GraphAddEdge","createStore","applyMiddleware","ReactDOM","render","es","Fragment","src_App","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"4EAAAA,EAAAC,QAAiBC,EAAAC,EAAuB,qDCAxCH,EAAAC,QAAiBC,EAAAC,EAAuB,i+oJCElCC,EAAoB,SAACC,EAAcC,EAAeC,EAAQC,GAC9D,OAAOC,IAAmBJ,GACvBK,MACC,OACAD,IAAaH,GACVK,SAASH,EAAQ,IACjBI,GAAG,SAAAC,GAAC,OAAIA,EAAED,MAEdF,MAAM,SAAUD,OAChBC,MAAM,YAAaD,MAAkBK,OAAO,KAC5CJ,MAAM,SAAUD,IAAuB,GAARD,EAAaD,EAAS,KAGpDQ,EAAY,SAACC,EAAWC,EAAYC,EAAYC,GACpD,OAAOH,EACJI,QAAQ,QAAQ,GAChBC,OAAO,KACPC,KAAK,SAAU,QACfA,KAAK,eAAgB,KACrBC,UAAU,UACVC,KAAKP,GACLQ,KAAK,UACLH,KAAK,IAAK,IACVI,MAAM,OAAQR,GACdS,KAAKR,IAGJS,EAAY,SAACZ,EAAWa,GAC5B,OAAOb,EACJI,QAAQ,QAAQ,GAChBC,OAAO,KACPC,KAAK,SAAU,QACfC,UAAU,QACVC,KAAKK,GACLJ,KAAK,QACLK,KAAK,SAAAjB,GACJ,OAAOA,EAAED,MAITmB,EAAY,SAACf,EAAWgB,GAC5B,OAAOhB,EACJI,QAAQ,QAAQ,GAChBC,OAAO,KACPC,KAAK,SAAU,QACfA,KAAK,iBAAkB,IACvBC,UAAU,QACVC,KAAKQ,GACLP,KAAK,QACLH,KAAK,eAAgB,SAAAT,GAAC,OAAIoB,KAAKC,KAAKrB,EAAEsB,UAWrCC,EAAe,SACnBC,EACAC,EACApB,EACAC,EACAoB,EACAC,EACAC,EACAC,GAyCA,OAvCAA,EAAmBC,MAAML,GACzBI,EAAmBhC,MAAM,QAAQkC,MAAMJ,GACvCE,EAAmBG,MAAM,GAAGC,WAE5BT,EAAgBA,EAAcb,KAAKc,EAAiB,SAAAzB,GAClD,OAAOA,EAAED,MAEGmC,OAAOC,SACrBX,EAAgBA,EACbY,QACA5B,OAAO,UACPC,KAAK,IAAK,IACVI,MAAM,OAAQR,GACdgC,MAAMb,GACNV,KAAKR,IAGRoB,EAAgBA,EAAcf,KAAKgB,EAAiB,SAAA3B,GAClD,OAAOA,EAAEsC,OAAOvC,GAAK,IAAMC,EAAEuC,OAAOxC,MAExBmC,OAAOC,SACrBT,EAAgBA,EACbU,QACA5B,OAAO,QACP6B,MAAMX,GACLE,KACFA,EAAgBA,EAAcjB,KAAKc,EAAiB,SAAAzB,GAClD,OAAOA,EAAED,MAEGmC,OAAOC,SACrBP,EAAgBA,EACbQ,QACA5B,OAAO,QACPS,KAAK,SAASjB,GACb,OAAOA,EAAED,KAEVsC,MAAMT,GACNd,KAAKR,IAEH,CAAEkB,gBAAeE,gBAAeE,kBC0C1BY,cA/Ib,SAAAA,EAAYC,GAAW,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAL,IACrBE,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAH,GAAA1B,KAAA+B,KAAMJ,KAFRO,WACuB,EAAAN,EAKvBO,kBAAoB,WAClB,GAAKP,EAAKM,MAAME,QAAhB,CACA,IAAI9C,EAAqB,CACvB,CAAEL,GAAI,KACN,CAAEA,GAAI,KACN,CAAEA,GAAI,KACN,CAAEA,GAAI,MAEJoD,EAAqB,CACvB,CAAEb,OAAQ,IAAKhB,MAAO,EAAGiB,OAAQ,KACjC,CAAED,OAAQ,IAAKhB,MAAO,EAAGiB,OAAQ,KACjC,CAAED,OAAQ,IAAKhB,MAAO,EAAGiB,OAAQ,KACjC,CAAED,OAAQ,IAAKhB,MAAO,EAAGiB,OAAQ,MAG/Ba,EAAoBhD,EAAWiD,IAAI,SAAAC,GACrC,OAAOC,KAAKC,MAAMD,KAAKE,UAAUH,MAG/BI,EAAoBP,EAAWE,IAAI,SAAAC,GACrC,OAAOC,KAAKC,MAAMD,KAAKE,UAAUH,MAG/BK,EAAU/D,IAAU8C,EAAKM,MAAME,SAC/BvD,EAAQ+C,EAAKM,MAAME,QAAQvD,MAAMiE,QAAQtC,MACzC5B,EAASgD,EAAKM,MAAME,QAAQxD,OAAOkE,QAAQtC,MAEzCuC,EAAaC,EACjBV,EACAM,EACAhE,EACAC,GAGIoE,EAAO,SAACF,GAkBZ,OAAOjE,MACJoE,GAAG,QAlBc,SAAChE,GACdJ,IAASqE,QAAQJ,EAAWK,YAAY,IAAKjC,UAClDjC,EAAEmE,GAAKnE,EAAEoE,EACTpE,EAAEqE,GAAKrE,EAAEsE,IAgBRN,GAAG,OAbU,SAAChE,GACfA,EAAEmE,GAAKvE,IAASwE,EAChBpE,EAAEqE,GAAKzE,IAAS0E,IAYfN,GAAG,MATY,SAAChE,GACZJ,IAASqE,QAAQJ,EAAWK,YAAY,GAC7ClE,EAAEmE,GAAK,KACPnE,EAAEqE,GAAK,QASPE,EAAOT,EACTH,EACAP,EACA,UACAW,EAAKF,IAGHW,EAAOV,EAAqBH,EAASD,GAEzCG,EAAWG,GAAG,OAAQ,WACpBO,EAAK9D,KAAK,KAAM,SAACT,GAAD,OAAYA,EAAEoE,IAAG3D,KAAK,KAAM,SAACT,GAAD,OAAYA,EAAEsE,IAE1DE,EACG/D,KAAK,KAAM,SAACT,GAAD,OAAYA,EAAEsC,OAAO8B,IAChC3D,KAAK,KAAM,SAACT,GAAD,OAAYA,EAAEsC,OAAOgC,IAChC7D,KAAK,KAAM,SAACT,GAAD,OAAYA,EAAEuC,OAAO6B,IAChC3D,KAAK,KAAM,SAACT,GAAD,OAAYA,EAAEuC,OAAO+B,MAGrC,IAAMG,EAAaC,OAAOC,YAAY,WACpC,GAAIvE,EAAWwE,OAAS,EAAG,CACzB,IAAIC,EAAkBzD,KAAK0D,SAASC,WAChCC,EAAe5D,KAAK6D,MAAM7D,KAAK0D,SAAW1E,EAAWwE,QAAU,GAC7C,IAAlBI,IACFA,EAAe,GAEjB,IAAIE,EAAc9D,KAAK6D,MAAM7D,KAAK0D,SAAW1E,EAAWwE,QAAU,GAC7C,IAAjBM,IACFA,EAAc,GAEhB9E,EAAU,GAAA+E,OAAAxC,OAAAyC,EAAA,EAAAzC,CAAOvC,GAAP,CAAmB,CAAEL,GAAI8E,KACnC1B,EAAU,GAAAgC,OAAAxC,OAAAyC,EAAA,EAAAzC,CACLQ,GADK,CAER,CACEb,OAAQuC,EACRvD,MAAO,EACPiB,OAAQnC,EAAW4E,GAAcjF,MAIrCqD,EAAYhD,EAAWiD,IAAI,SAAAC,GACzB,OAAOC,KAAKC,MAAMD,KAAKE,UAAUH,MAGnCI,EAAYP,EAAWE,IAAI,SAAAC,GACzB,OAAOC,KAAKC,MAAMD,KAAKE,UAAUH,MAGnC,IAAI+B,EAAWvB,EACbS,EACAnB,EACA,UACAW,EAAKF,GACLW,EACAd,EACA,KACAG,GAEFU,EAAOc,EAAS7D,cAChBgD,EAAOa,EAAS3D,gBAEjB,KAEHgB,EAAK4C,SAAS,CAAEb,iBA5HhB/B,EAAK6C,MAAQ,CAAEd,YAAa,GAC5B/B,EAAKM,MAAQwC,IAAMC,YAHE/C,wEAkIrB,OAAOgD,EAAAC,EAAAC,cAAA,OAAKC,IAAKhD,KAAKG,MAAOrD,MAAM,QAAQD,OAAO,yDAI9CmD,KAAK0C,MAAMd,YACbC,OAAOoB,cAAcjD,KAAK0C,MAAMd,YAE9B5B,KAAK0C,MAAMQ,SACblD,KAAK0C,MAAMQ,QAAQC,cA/IEC,aCqBZC,0LAnBX,OACER,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAA,OAAKO,UAAU,WACbT,EAAAC,EAAAC,cAAA,wBACaF,EAAAC,EAAAC,cAAA,QAAMO,UAAU,eAAhB,KACXT,EAAAC,EAAAC,cAAA,QAAMO,UAAU,eAAhB,KACAT,EAAAC,EAAAC,cAAA,QAAMO,UAAU,eAAhB,MAEFT,EAAAC,EAAAC,cAAA,8CACAF,EAAAC,EAAAC,cAACQ,EAAA,EAAD,CAAMC,GAAG,YACPX,EAAAC,EAAAC,cAAA,+BAGJF,EAAAC,EAAAC,cAACU,EAAD,cAfWL,8BCoBNM,EAAa,SAACC,GAAD,MACC,kBAAlBA,GAA8BA,EAAcC,eAAe,yCC2FrDC,qBA7Gb,SAAAA,EAAYjE,GAAW,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAA6D,IACrBhE,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAA+D,GAAA5F,KAAA+B,KAAMJ,KAFRO,WACuB,EAAAN,EAKvBO,kBAAoB,WAClB,GAAKP,EAAKM,MAAME,QAAhB,CAGA,IAFA,IAAI9C,EAA4B,CAAC,CAAEL,GAAI,IAAKE,OAAQ,GAAI0G,MAAO,YAEtDC,EAAI,EAAGA,EAAI,GAAIA,IACtBxG,EAAWyG,KAAK,CACd9G,GAAIqB,KAAK0D,SAASC,WAClB9E,OAAQmB,KAAK6D,MAAsB,EAAhB7D,KAAK0D,UACxB6B,MAAO,KAAwB,SAAhBvF,KAAK0D,UAAwB,GAAGC,SAAS,MAI5D+B,QAAQC,IAAI3G,GAEZ,IAAIgD,EAAoBhD,EAAWiD,IAAI,SAAAC,GACrC,OAAOC,KAAKC,MAAMD,KAAKE,UAAUH,MAG/BK,EAAU/D,IAAU8C,EAAKM,MAAME,SAC/BvD,EAAQ+C,EAAKM,MAAME,QAAQvD,MAAMiE,QAAQtC,MACzC5B,EAASgD,EAAKM,MAAME,QAAQxD,OAAOkE,QAAQtC,MAEzCuC,EAAajE,IAAmBwD,GACnCvD,MAAM,SAAUD,MAAmBoH,SAAS,IAC5CnH,MAAM,SAAUD,IAAeD,EAAQ,EAAGD,EAAS,IACnDG,MAAM,YAAaD,MAAkBK,OAAO,SAACD,GAAD,OAAYA,EAAEC,UAyBzDsE,EAAOZ,EACRpD,QAAQ,aAAa,GACrBC,OAAO,KACPC,KAAK,SAAU,WACfA,KAAK,eAAgB,KACrBC,UAAU,UACVC,KAAKyC,GACLxC,KAAK,UACLH,KAAK,IAAK,SAACT,GAAD,OAAYA,EAAEC,SACxBY,MAAM,OAAQ,SAACb,GAAD,OAAYA,EAAE2G,QAC5B7F,KAlCU,SAAC+C,GAkBZ,OAAOjE,MACJoE,GAAG,QAlBc,SAAChE,GACdJ,IAASqE,QAAQJ,EAAWK,YAAY,IAAKjC,UAClDjC,EAAEmE,GAAKnE,EAAEoE,EACTpE,EAAEqE,GAAKrE,EAAEsE,IAgBRN,GAAG,OAbU,SAAChE,GACfA,EAAEmE,GAAKvE,IAASwE,EAChBpE,EAAEqE,GAAKzE,IAAS0E,IAYfN,GAAG,MATY,SAAChE,GACZJ,IAASqE,QAAQJ,EAAWK,YAAY,GAC7ClE,EAAEmE,GAAK,KACPnE,EAAEqE,GAAK,OAmBHN,CAAKF,IAEbA,EAAWG,GAAG,OAAQ,WACpBO,EAAK9D,KAAK,KAAM,SAACT,GAAD,OAAYA,EAAEoE,IAAG3D,KAAK,KAAM,SAACT,GAAD,OAAYA,EAAEsE,QAlE5D5B,EAAK6C,MAAQ,CAAEd,YAAa,GAC5B/B,EAAKM,MAAQwC,IAAMC,YAHE/C,wEAyErB,OACEgD,EAAAC,EAAAC,cAAA,OAAKO,UAAU,UACbT,EAAAC,EAAAC,cAACQ,EAAA,EAAD,CAAMC,GAAG,KACPX,EAAAC,EAAAC,cAAA,wBACaF,EAAAC,EAAAC,cAAA,QAAMO,UAAU,eAAhB,KACXT,EAAAC,EAAAC,cAAA,QAAMO,UAAU,eAAhB,KACAT,EAAAC,EAAAC,cAAA,QAAMO,UAAU,eAAhB,OAGJT,EAAAC,EAAAC,cAACQ,EAAA,EAAD,CAAMC,GAAG,YACPX,EAAAC,EAAAC,cAAA,2BACgBF,EAAAC,EAAAC,cAAA,QAAMO,UAAU,eAAhB,KACdT,EAAAC,EAAAC,cAAA,QAAMO,UAAU,eAAhB,KACAT,EAAAC,EAAAC,cAAA,QAAMO,UAAU,eAAhB,OAGJT,EAAAC,EAAAC,cAACQ,EAAA,EAAD,CAAMC,GAAG,QACPX,EAAAC,EAAAC,cAAA,oBACSF,EAAAC,EAAAC,cAAA,QAAMO,UAAU,eAAhB,KACPT,EAAAC,EAAAC,cAAA,QAAMO,UAAU,eAAhB,KACAT,EAAAC,EAAAC,cAAA,QAAMO,UAAU,eAAhB,OAGJT,EAAAC,EAAAC,cAAA,qBACUF,EAAAC,EAAAC,cAAA,QAAMO,UAAU,eAAhB,KACRT,EAAAC,EAAAC,cAAA,QAAMO,UAAU,eAAhB,KACAT,EAAAC,EAAAC,cAAA,QAAMO,UAAU,eAAhB,MAEFT,EAAAC,EAAAC,cAAA,OAAKC,IAAKhD,KAAKG,MAAOrD,MAAM,OAAOD,OAAO,OAAOyG,UAAU,UACzDT,EAAAC,EAAAC,cAAA,QAAMjG,MAAM,OAAOD,OAAO,OAAOuH,KAAK,qBAxG3BhB,cCwCfiB,qBAEJ,SAAAA,EAAYzE,GAAqB,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAqE,IAC/BxE,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAuE,GAAApG,KAAA+B,KAAMJ,KAFRO,WACiC,EAAAN,EAyBjCO,kBAAoB,WAClB,GAA2B,OAAvBP,EAAKM,MAAME,QAAf,CACA,IAAIE,EAAoBV,EAAKD,MAAM0E,MAAM/G,WAAWiD,IAAI,SAAAC,GACtD,OAAOC,KAAKC,MAAMD,KAAKE,UAAUH,MAG/BI,EAAoBhB,EAAKD,MAAM0E,MAAMhE,WAAWE,IAAI,SAAAC,GACtD,OAAOC,KAAKC,MAAMD,KAAKE,UAAUH,MAG/BK,EAAU/D,IAAU8C,EAAKM,MAAME,SACnC4D,QAAQC,IAAIpD,GACZ,IAAIhE,EAAQ+C,EAAKM,MAAME,QAAQvD,MAAMiE,QAAQtC,MACzC5B,EAASgD,EAAKM,MAAME,QAAQxD,OAAOkE,QAAQtC,MAEzCuC,EAAaC,EACjBV,EACAM,EACAhE,EACAC,GAGIoE,EAAO,SAACF,GAkBZ,OAAOjE,MACJoE,GAAG,QAlBc,SAAChE,GACdJ,IAASqE,QAAQJ,EAAWK,YAAY,IAAKjC,UAClDjC,EAAEmE,GAAKnE,EAAEoE,EACTpE,EAAEqE,GAAKrE,EAAEsE,IAgBRN,GAAG,OAbU,SAAChE,GACfA,EAAEmE,GAAKvE,IAASwE,EAChBpE,EAAEqE,GAAKzE,IAAS0E,IAYfN,GAAG,MATY,SAAChE,GACZJ,IAASqE,QAAQJ,EAAWK,YAAY,GAC7ClE,EAAEmE,GAAK,KACPnE,EAAEqE,GAAK,QASP+C,EAAStD,EACXH,EACAP,EACA,UACAW,EAAKF,IAGHwD,EAASvD,EAAqBH,EAASD,GACvC4D,EAASxD,EAAqBH,EAASP,GAC3CV,EAAK4C,SAAS,CAAE8B,SAAQE,SAAQD,SAAQ1D,UAASI,OAAMF,eAEvDA,EAAWG,GAAG,OAAQ,WACpBoD,EAAO3G,KAAK,KAAM,SAACT,GAAD,OAAYA,EAAEoE,IAAG3D,KAAK,KAAM,SAACT,GAAD,OAAYA,EAAEsE,IAC5DgD,EAAO7G,KAAK,IAAK,SAACT,GAAD,OAAYA,EAAEoE,EAAI,KAAI3D,KAAK,KAAM,SAACT,GAAD,OAAYA,EAAEsE,IAEhE+C,EACG5G,KAAK,KAAM,SAACT,GAAD,OAAYA,EAAEsC,OAAO8B,IAChC3D,KAAK,KAAM,SAACT,GAAD,OAAYA,EAAEsC,OAAOgC,IAChC7D,KAAK,KAAM,SAACT,GAAD,OAAYA,EAAEuC,OAAO6B,IAChC3D,KAAK,KAAM,SAACT,GAAD,OAAYA,EAAEuC,OAAO+B,QA1FN5B,EA8FjC6E,aAAe,SACbC,GAEA,GAAqB,OAAjBA,EAAMjF,OAAiB,KAAAkF,EACDD,EAAMjF,OAAtBmF,EADiBD,EACjBC,KAAMpG,EADWmG,EACXnG,MACdoB,EAAK4C,SAAL3C,OAAAgF,EAAA,EAAAhF,CAAA,GACG+E,EAAOpG,MApGmBoB,EAyGjCkF,YAAc,SAACJ,GACbA,EAAMK,iBACDnF,EAAK6C,MAAMuC,qBAGdpF,EAAK4C,SAAS,CAAEwC,sBAAsB,IAFtCpF,EAAK4C,SAAS,CAAEwC,sBAAsB,KA5GTpF,EAkHjCqF,YAAc,SAACP,GACbA,EAAMK,iBACDnF,EAAK6C,MAAMyC,qBAGdtF,EAAK4C,SAAS,CAAE0C,sBAAsB,IAFtCtF,EAAK4C,SAAS,CAAE0C,sBAAsB,KArHTtF,EA2HjCuF,YAAc,SAACT,GACbA,EAAMK,iBACDnF,EAAK6C,MAAM2C,qBAGdxF,EAAK4C,SAAS,CAAE4C,sBAAsB,IAFtCxF,EAAK4C,SAAS,CAAE4C,sBAAsB,KA9HTxF,EAoIjCyF,YAAc,SAACX,GACbA,EAAMK,iBACDnF,EAAK6C,MAAM6C,qBAGd1F,EAAK4C,SAAS,CAAE8C,sBAAsB,IAFtC1F,EAAK4C,SAAS,CAAE8C,sBAAsB,KAvIT1F,EA6IjC2F,iBAAmB,SACjBb,GAEAA,EAAMK,iBACN,IAAMS,EAAc5F,EAAKD,MAAM0E,MAAM/G,WACjCmI,EAAW,IAAIC,IASnB,GARAF,EAAYG,QAAQ,SAAAnF,GAClBiF,EAASG,IAAIpF,EAAQvD,MAGvByH,EAAMK,iBACNnF,EAAK4C,SAAS,CACZqD,gBAAiB,KAEfjG,EAAK6C,MAAMqD,QAAQhE,QAAU,EAC/BlC,EAAK4C,SAAS,CACZqD,gBAAiB,+CAEd,GAAIJ,EAASM,IAAInG,EAAK6C,MAAMqD,SACjClG,EAAK4C,SAAS,CACZqD,gBAAiB,+CAEd,GACLjG,EAAK6C,MAAMqD,QAAQhE,OAAS,IAC3B2D,EAASM,IAAInG,EAAK6C,MAAMqD,SACzB,CACA,IAAIE,EAAW,CAAE/I,GAAI2C,EAAK6C,MAAMqD,SAChClG,EAAKD,MAAMsG,QAAQD,GAEnBpG,EAAK4C,SAAS,CAAE0C,sBAAsB,GAAS,WAC7C,IAAI5E,EAAoBV,EAAKD,MAAM0E,MAAM/G,WAAWiD,IAAI,SAAAC,GACtD,OAAOC,KAAKC,MAAMD,KAAKE,UAAUH,MAG/BI,EAAoBhB,EAAKD,MAAM0E,MAAMhE,WAAWE,IAAI,SAAAC,GACtD,OAAOC,KAAKC,MAAMD,KAAKE,UAAUH,MAE/BK,EAAU/D,IAAU8C,EAAKM,MAAME,SAC/BkE,EAASzD,EAAQjD,UAAU,SAC3B4G,EAAS3D,EAAQjD,UAAU,SAE3B2G,EAAS1D,EAAQjD,UAAU,SAC3BsI,EAAoBlF,EACtBpB,EAAK6C,MAAM6B,OACXhE,EACA,UACAV,EAAK6C,MAAMxB,KAAKrB,EAAK6C,MAAM1B,YAC3BnB,EAAK6C,MAAM8B,OACX3D,EACAhB,EAAK6C,MAAM+B,OACX5E,EAAK6C,MAAM1B,YAEbuD,EAAS4B,EAAkBxH,cAC3B8F,EAAS0B,EAAkBpH,cAC3ByF,EAAS2B,EAAkBtH,cAE3BgB,EAAK6C,MAAM1B,WAAWG,GAAG,OAAQ,WAC/BoD,EAAO3G,KAAK,KAAM,SAACT,GAAD,OAAYA,EAAEoE,IAAG3D,KAAK,KAAM,SAACT,GAAD,OAAYA,EAAEsE,IAC5DgD,EAAO7G,KAAK,IAAK,SAACT,GAAD,OAAYA,EAAEoE,EAAI,KAAI3D,KAAK,KAAM,SAACT,GAAD,OAAYA,EAAEsE,IAEhE+C,EACG5G,KAAK,KAAM,SAACT,GAAD,OAAYA,EAAEsC,OAAO8B,IAChC3D,KAAK,KAAM,SAACT,GAAD,OAAYA,EAAEsC,OAAOgC,IAChC7D,KAAK,KAAM,SAACT,GAAD,OAAYA,EAAEuC,OAAO6B,IAChC3D,KAAK,KAAM,SAACT,GAAD,OAAYA,EAAEuC,OAAO+B,MAErC5B,EAAK4C,SAAS,CAAE+B,SAAQD,SAAQE,eA/ML5E,EAoNjCuG,iBAAmB,SACjBzB,GA0BA,GAxBAA,EAAMK,iBACNf,QAAQC,IAAI,WACZrE,EAAK4C,SAAS,CACZ4D,oBAAqB,GACrBC,oBAAqB,GACrBC,oBAAqB,KAEnB1G,EAAK6C,MAAM8D,YAAYzE,QAAU,GACnClC,EAAK4C,SAAS,CACZ4D,oBACE,uDAGFxG,EAAK6C,MAAM+D,aAAe,GAC5B5G,EAAK4C,SAAS,CACZ8D,oBAAqB,uCAGrB1G,EAAK6C,MAAMgE,YAAY3E,QAAU,GACnClC,EAAK4C,SAAS,CACZ6D,oBACE,uDAIJzG,EAAK6C,MAAM8D,YAAYzE,OAAS,GAChClC,EAAK6C,MAAM+D,YAAc,GACzB5G,EAAK6C,MAAMgE,YAAY3E,OAAS,EAChC,CACA,IAAIkE,EAAW,CACbxG,OAAQI,EAAK6C,MAAM8D,YACnB/H,MAAOoB,EAAK6C,MAAM+D,YAClB/G,OAAQG,EAAK6C,MAAMgE,aAGrB7G,EAAKD,MAAM+G,QAAQV,GAEnBpG,EAAK4C,SAAS,CAAE8C,sBAAsB,GAAS,WAC7C,IAAIhF,EAAoBV,EAAKD,MAAM0E,MAAM/G,WAAWiD,IAAI,SAAAC,GACtD,OAAOC,KAAKC,MAAMD,KAAKE,UAAUH,MAG/BI,EAAoBhB,EAAKD,MAAM0E,MAAMhE,WAAWE,IAAI,SAAAC,GACtD,OAAOC,KAAKC,MAAMD,KAAKE,UAAUH,MAE/BK,EAAU/D,IAAU8C,EAAKM,MAAME,SAE/BkE,EAASzD,EAAQjD,UAAU,SAC3B4G,EAAS3D,EAAQjD,UAAU,SAE3B2G,EAAS1D,EAAQjD,UAAU,SAC3BsI,EAAoBlF,EACtBpB,EAAK6C,MAAM6B,OACXhE,EACA,UACAV,EAAK6C,MAAMxB,KAAKrB,EAAK6C,MAAM1B,YAC3BnB,EAAK6C,MAAM8B,OACX3D,EACAhB,EAAK6C,MAAM+B,OACX5E,EAAK6C,MAAM1B,YAEbuD,EAAS4B,EAAkBxH,cAC3B8F,EAAS0B,EAAkBpH,cAC3ByF,EAAS2B,EAAkBtH,cAC3BoF,QAAQC,IAAIM,GACZ3E,EAAK6C,MAAM1B,WAAWG,GAAG,OAAQ,WAC/BoD,EAAO3G,KAAK,KAAM,SAACT,GAAD,OAAYA,EAAEoE,IAAG3D,KAAK,KAAM,SAACT,GAAD,OAAYA,EAAEsE,IAC5DgD,EAAO7G,KAAK,IAAK,SAACT,GAAD,OAAYA,EAAEoE,EAAI,KAAI3D,KAAK,KAAM,SAACT,GAAD,OAAYA,EAAEsE,IAEhE+C,EACG5G,KAAK,KAAM,SAACT,GAAD,OAAYA,EAAEsC,OAAO8B,IAChC3D,KAAK,KAAM,SAACT,GAAD,OAAYA,EAAEsC,OAAOgC,IAChC7D,KAAK,KAAM,SAACT,GAAD,OAAYA,EAAEuC,OAAO6B,IAChC3D,KAAK,KAAM,SAACT,GAAD,OAAYA,EAAEuC,OAAO+B,MAGrC5B,EAAK4C,SAAS,CAAE+B,SAAQD,SAAQE,eAjSpC5E,EAAK6C,MAAQ,CACXqD,QAAS,GACTD,gBAAiB,GACjBU,YAAa,GACbH,oBAAqB,GACrBI,YAAa,EACbF,oBAAqB,GACrBG,YAAa,GACbJ,oBAAqB,GACrBnB,sBAAsB,EACtBF,sBAAsB,EACtBM,sBAAsB,EACtBF,sBAAsB,EACtBd,OAAQ,KACRC,OAAQ,KACRC,OAAQ,KACR3D,QAAS,KACTE,WAAY,KACZE,KAAM,MAERrB,EAAKM,MAAQwC,IAAMC,YAtBY/C,wEAwSxB,IAAA+G,EAAA5G,KAEP,OADAiE,QAAQC,IAAIlE,KAAKJ,MAAM0E,MAAMhE,YAE3BuC,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAC8D,EAAD,MAEAhE,EAAAC,EAAAC,cAAA,OAAKC,IAAKhD,KAAKG,MAAOrD,MAAM,OAAOD,OAAO,SAC1CgG,EAAAC,EAAAC,cAAA,OAAKO,UAAU,gBACbT,EAAAC,EAAAC,cAAA,OAAKO,UAAU,YACbT,EAAAC,EAAAC,cAAA,mBACAF,EAAAC,EAAAC,cAAA,UAAQ+D,QAAS,SAAAnC,GAAK,OAAIiC,EAAK7B,YAAYJ,KACxC3E,KAAK0C,MAAMuC,qBAAuB,YAAc,eAEnDpC,EAAAC,EAAAC,cAAA,UAAQ+D,QAAS9G,KAAKkF,aAAtB,cACClF,KAAK0C,MAAMuC,qBACVpC,EAAAC,EAAAC,cAAA,UACG/C,KAAKJ,MAAM0E,MAAM/G,WAAWiD,IAAI,SAACC,EAASsG,GACzC,OACElE,EAAAC,EAAAC,cAAA,OAAKO,UAAU,cACbT,EAAAC,EAAAC,cAAA,OAAKiE,IAAKC,MACVpE,EAAAC,EAAAC,cAAA,MAAImE,IAAKH,GAAT,QAAsBtG,EAAQvD,QAKpC,KAEH8C,KAAK0C,MAAMyC,qBACVtC,EAAAC,EAAAC,cAAA,YACEF,EAAAC,EAAAC,cAAA,SAAOoE,QAAQ,WAAf,aACAtE,EAAAC,EAAAC,cAAA,SACEqE,KAAK,OACLvC,KAAK,UACLwC,SAAUrH,KAAK0E,eAGjB7B,EAAAC,EAAAC,cAAA,SAAI/C,KAAK0C,MAAMoD,iBACfjD,EAAAC,EAAAC,cAAA,UAAQqE,KAAK,SAASN,QAAS9G,KAAKwF,kBAApC,gBAIA,MAEN3C,EAAAC,EAAAC,cAAA,OAAKO,UAAU,YACbT,EAAAC,EAAAC,cAAA,mBACAF,EAAAC,EAAAC,cAAA,UAAQ+D,QAAS9G,KAAKoF,aACnBpF,KAAK0C,MAAM2C,qBAAuB,YAAc,eAEnDxC,EAAAC,EAAAC,cAAA,UAAQ+D,QAAS9G,KAAKsF,aAAtB,YACCtF,KAAK0C,MAAM2C,qBACVxC,EAAAC,EAAAC,cAAA,OAAKO,UAAU,YACZtD,KAAKJ,MAAM0E,MAAMhE,WAAWE,IAAI,SAACC,EAASsG,GACzC,OACElE,EAAAC,EAAAC,cAAA,OAAKmE,IAAKH,EAAOzD,UAAU,aACzBT,EAAAC,EAAAC,cAAA,OAAKiE,IAAKM,MACVzE,EAAAC,EAAAC,cAAA,OAAKO,UAAU,aACbT,EAAAC,EAAAC,cAAA,0BAAkBtC,EAAQhB,QAC1BoD,EAAAC,EAAAC,cAAA,4BAAoBtC,EAAQhC,OAC5BoE,EAAAC,EAAAC,cAAA,0BAAkBtC,EAAQf,aAMlC,KAEHM,KAAK0C,MAAM6C,qBACV1C,EAAAC,EAAAC,cAAA,YACEF,EAAAC,EAAAC,cAAA,SAAOoE,QAAQ,eAAf,eACAtE,EAAAC,EAAAC,cAAA,UAAQ8B,KAAK,cAAcwC,SAAUrH,KAAK0E,cACxC7B,EAAAC,EAAAC,cAAA,UAAQtE,MAAM,IAAd,eACCuB,KAAKJ,MAAM0E,MAAM/G,WAAWiD,IAAI,SAACC,EAASsG,GACzC,OAAOrD,EAAWjD,GAChBoC,EAAAC,EAAAC,cAAA,UAAQtE,MAAOgC,EAAQvD,GAAIgK,IAAKH,GAC7BtG,EAAQvD,IAET,QAGR2F,EAAAC,EAAAC,cAAA,SAAI/C,KAAK0C,MAAM2D,qBAEfxD,EAAAC,EAAAC,cAAA,SAAOoE,QAAQ,eAAf,kBACAtE,EAAAC,EAAAC,cAAA,SACEqE,KAAK,SACLvC,KAAK,cACL0C,IAAI,IACJF,SAAUrH,KAAK0E,eAEjB7B,EAAAC,EAAAC,cAAA,SAAI/C,KAAK0C,MAAM6D,qBACf1D,EAAAC,EAAAC,cAAA,SAAOoE,QAAQ,eAAf,eACAtE,EAAAC,EAAAC,cAAA,UAAQ8B,KAAK,cAAcwC,SAAUrH,KAAK0E,cACxC7B,EAAAC,EAAAC,cAAA,UAAQtE,MAAM,IAAd,eACCuB,KAAKJ,MAAM0E,MAAM/G,WAAWiD,IAAI,SAACC,EAASsG,GACzC,OAAOrD,EAAWjD,GAChBoC,EAAAC,EAAAC,cAAA,UAAQtE,MAAOgC,EAAQvD,GAAIgK,IAAKH,GAC7BtG,EAAQvD,IAET,QAGR2F,EAAAC,EAAAC,cAAA,SAAI/C,KAAK0C,MAAM4D,qBACfzD,EAAAC,EAAAC,cAAA,UAAQqE,KAAK,SAASN,QAAS9G,KAAKoG,kBAApC,gBAIA,eAnZMhD,cAoaPoE,cATS,SAACC,GAAD,MAA6C,CACnEnD,MAAOmD,IAGkB,SAACC,GAAD,MAA0C,CACnExB,QAAS,SAAAyB,GAAO,OAAID,EC7cb,CACLN,KAAM,eACNQ,QD2c6CD,KAC/ChB,QAAS,SAAAkB,GAAO,OAAIH,GCxcHE,EDwc8BC,ECvc/C5D,QAAQC,IAAI0D,GACL,CACLR,KAAM,eACNQ,QAASA,KAJK,IAACA,KD2cJJ,CAGbnD,mBEzSayD,qBAnKb,SAAAA,EAAYlI,GAAW,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAA8H,IACrBjI,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAgI,GAAA7J,KAAA+B,KAAMJ,KAFRO,WACuB,EAAAN,EAIvBO,kBAAoB,WAClB,GAAKP,EAAKM,MAAME,QAAhB,CACA,IAAM0H,EAAc,IAAIC,IACxBC,EAAQrC,QAAQ,SAAAnF,GACVA,EAAQhC,OACVsJ,EAAYG,IAAIzH,EAAQ0H,QAAQjL,GAAI,CAAEkL,IAAK3H,EAAQhC,UAGvD,IAAI4J,EAAoB,IAAIL,IAC5BK,EAAkBH,IAAI,6BAA8B,GACpDG,EAAkBH,IAAI,aAAc,GACpCG,EAAkBH,IAAI,sBAAuB,GAC7CG,EAAkBH,IAAI,wBAAyB,GAC/CG,EAAkBH,IAAI,aAAc,GACpCG,EAAkBH,IAAI,6BAA8B,GACpDG,EAAkBH,IAAI,sBAAuB,GAC7CG,EAAkBH,IAAI,gBAAiB,GAEvCI,EAAY1C,QAAQ,SAAAnF,GAClB,IAAI8H,EAAaR,EAAYS,IAAI/H,EAAQgI,UACrCF,IACFA,EAAWrL,GAAKuD,EAAQoE,KACxB0D,EAAWG,QAAUL,EAAkBG,IAAI/H,EAAQkI,OAAOlK,OAC1D8J,EAAWI,OAASlI,EAAQkI,OAAOlK,MACnCsJ,EAAYG,IAAIzH,EAAQgI,SAAUF,MAItC,IAAMK,EAA0B,GAChCb,EAAYnC,QAAQ,SAAAnH,GAClBmK,EAAiB5E,KAAKvF,KAGxB,IAAIoK,EAAoBD,EAAiBE,OAAO,SAAArI,GAC9C,OAA0B,GAAnBA,EAAQiI,UAGjBzE,QAAQC,IAAI2E,GAEZ,IAAI/H,EAAU/D,IAAU8C,EAAKM,MAAME,SAC/BvD,EAAQ+C,EAAKM,MAAME,QAAQvD,MAAMiE,QAAQtC,MACzC5B,EAASgD,EAAKM,MAAME,QAAQxD,OAAOkE,QAAQtC,MAEzCuC,EAAajE,IAAmB8L,GACnC7L,MAAM,SAAUD,MAAmBoH,SAAS,IAC5CnH,MAAM,SAAUD,IAAeD,EAAQ,EAAGD,EAAS,IACnDG,MACC,UACAD,MAAkBK,OAAO,SAACD,GACxB,OAAOoB,KAAKwK,KAAK5L,EAAEiL,KAAO,OAI5BY,EAAUjM,IAAU,QACrBY,OAAO,OACPK,MAAM,WAAY,YAClBA,MAAM,UAAW,MACjBA,MAAM,aAAc,UACpBA,MAAM,aAAc,YACpBA,MAAM,UAAW,QACjBA,MAAM,UAAW,IACjBA,MAAM,YAAa,QACnBA,MAAM,QAAS,QACfA,MAAM,gBAAiB,OACvBA,MAAM,cAXK,qCAoCV0D,EAAOZ,EACRpD,QAAQ,aAAa,GACrBC,OAAO,KACPC,KAAK,SAAU,WACfA,KAAK,eAAgB,KACrBC,UAAU,UACVC,KAAK+K,GACL9K,KAAK,UACLH,KAAK,IAAK,SAACT,GAAD,OAAYoB,KAAKwK,KAAK5L,EAAEiL,KAAO,MACzCpK,MAAM,OAAQ,SAACb,GACd,OAAQA,EAAEuL,SACR,KAAK,EACH,MAAO,UACT,KAAK,EACH,MAAO,UACT,KAAK,EACH,MAAO,UACT,KAAK,EACH,MAAO,UACT,KAAK,EACH,MAAO,UACT,KAAK,EACH,MAAO,UACT,KAAK,EACH,MAAO,UACT,KAAK,EACH,MAAO,UACT,QACE,MAAO,WAGZvH,GAAG,YAAa,SAAShE,GAExB,OADA8G,QAAQC,IAAI8E,GACLA,EACJhL,MAAM,aAAc,WACpBI,KAFI,YAAAkE,OAEanF,EAAED,GAFf,aAAAoF,OAE6BnF,EAAEwL,OAF/B,WAAArG,OAE+CnF,EAAEiL,QAEzDjH,GAAG,YAAa,SAAShE,GACxB,OAAO6L,EACJhL,MAAM,MAAgB,GAATnB,EAAe,MAC5BmB,MAAM,OAAgB,IAARlB,EAAe,QAEjCqE,GAAG,WAAY,WACd,OAAO6H,EAAQhL,MAAM,aAAc,YAEpCC,KApEU,SAAC+C,GAkBZ,OAAOjE,MACJoE,GAAG,QAlBc,SAAChE,GACdJ,IAASqE,QAAQJ,EAAWK,YAAY,IAAKjC,UAClDjC,EAAEmE,GAAKnE,EAAEoE,EACTpE,EAAEqE,GAAKrE,EAAEsE,IAgBRN,GAAG,OAbU,SAAChE,GACfA,EAAEmE,GAAKvE,IAASwE,EAChBpE,EAAEqE,GAAKzE,IAAS0E,IAYfN,GAAG,MATY,SAAChE,GACZJ,IAASqE,QAAQJ,EAAWK,YAAY,GAC7ClE,EAAEmE,GAAK,KACPnE,EAAEqE,GAAK,OAqDHN,CAAKF,IAEbA,EAAWG,GAAG,OAAQ,WACpBO,EAAK9D,KAAK,KAAM,SAACT,GAAD,OAAYA,EAAEoE,IAAG3D,KAAK,KAAM,SAACT,GAAD,OAAYA,EAAEsE,QA3I5D5B,EAAKM,MAAQwC,IAAMC,YAFE/C,wEAkJrB,OACEgD,EAAAC,EAAAC,cAAA,OAAKO,UAAU,OACbT,EAAAC,EAAAC,cAAC8D,EAAD,MACAhE,EAAAC,EAAAC,cAAA,OAAKO,UAAU,WACbT,EAAAC,EAAAC,cAAA,4QAOFF,EAAAC,EAAAC,cAAA,OAAKC,IAAKhD,KAAKG,MAAOrD,MAAM,QAAQD,OAAO,iBA/J9BuG,cCgBN6F,qMAdXC,SAASC,MAAQ,+CAIjB,OACEtG,EAAAC,EAAAC,cAACQ,EAAA,EAAD,KACEV,EAAAC,EAAAC,cAACqG,EAAA,EAAD,CAAOC,KAAK,IAAIC,OAAK,EAACC,UAAWlG,IACjCR,EAAAC,EAAAC,cAACqG,EAAA,EAAD,CAAOC,KAAK,WAAWC,OAAK,EAACC,UAAWlF,IACxCxB,EAAAC,EAAAC,cAACqG,EAAA,EAAD,CAAOC,KAAK,OAAOC,OAAK,EAACC,UAAWC,YAV1BpG,cCKEqG,QACW,cAA7B5H,OAAO6H,SAASC,UAEe,UAA7B9H,OAAO6H,SAASC,UAEhB9H,OAAO6H,SAASC,SAASC,MACvB,+DCLDC,UCbUC,EAAA,SAACC,GAAD,OAAgB,SAACC,GAAD,OAAe,SAACC,GAC7ChG,QAAQC,IAAI,aAAc+F,GAC1B,IACE,IAAIC,EAASF,EAAKC,GAElB,OADAhG,QAAQC,IAAI,YAAa6F,EAAMI,YACxBD,EACP,MAAOE,GAGP,OAFAA,EAAIH,OAASA,EACbhG,QAAQoG,MAAMD,GACPA,cDPPE,EAAsB,CACxB/M,WAAY,GACZ+C,WAAY,cASTuJ,2EAIU,IAAAU,EAAA,WAAiD,IAAhD7H,EAAgD8H,UAAAzI,OAAA,QAAA0I,IAAAD,UAAA,GAAAA,UAAA,GAAxCF,EAAcL,EAA0BO,UAAAzI,OAAA,EAAAyI,UAAA,QAAAC,EAC9D,OAAQR,EAAO7C,MACb,KAAKyC,EAAYa,aACf,OAAO5K,OAAA6K,EAAA,EAAA7K,CAAA,GACF4C,EADL,CAEEnF,WAAU,GAAA+E,OAAAxC,OAAAyC,EAAA,EAAAzC,CAAM4C,EAAMnF,YAAZ,CAAwB0M,EAAOrC,YAG7C,KAAKiC,EAAYe,aACf,OAAO9K,OAAA6K,EAAA,EAAA7K,CAAA,GACF4C,EADL,CAEEpC,WAAU,GAAAgC,OAAAxC,OAAAyC,EAAA,EAAAzC,CAAM4C,EAAMpC,YAAZ,CAAwB2J,EAAOrC,YAG7C,QACE,OAAOlF,IEzBPqH,ECFec,YAAYN,EAAcO,YAAgBhB,IDc/DiB,IAASC,OAAOnI,EAAAC,EAAAC,cAVhB,WACE,OACEF,EAAAC,EAAAC,cAACkI,EAAA,EAAD,CAAUlB,MAAOA,GACflH,EAAAC,EAAAC,cAACF,EAAAC,EAAMoI,SAAP,KACErI,EAAAC,EAAAC,cAACoI,EAAD,SAMQ,MAAUjC,SAASkC,eAAe,SH8G5C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.14315670.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/node.551d9315.png\";","module.exports = __webpack_public_path__ + \"static/media/edge.871ac98d.jpg\";","import * as D3 from 'd3';\n\nconst simulationCreator = (inputNodeArr, inputEdgesArr, height, width) => {\n  return D3.forceSimulation(inputNodeArr)\n    .force(\n      'link',\n      D3.forceLink(inputEdgesArr)\n        .distance(width / 20)\n        .id(d => d.id)\n    )\n    .force('charge', D3.forceManyBody())\n    .force('collision', D3.forceCollide().radius(10))\n    .force('center', D3.forceCenter(width * 0.6, height / 2));\n};\n\nconst enterNode = (selection, nodesArray, themeColor, dragFunction) => {\n  return selection\n    .classed('node', true)\n    .append('g')\n    .attr('stroke', '#fff')\n    .attr('stroke-width', 1.5)\n    .selectAll('circle')\n    .data(nodesArray)\n    .join('circle')\n    .attr('r', 10)\n    .style('fill', themeColor)\n    .call(dragFunction);\n};\n\nconst enterText = (selection, inputNodesArray) => {\n  return selection\n    .classed('desc', true)\n    .append('g')\n    .attr('stroke', '#999')\n    .selectAll('text')\n    .data(inputNodesArray)\n    .join('text')\n    .text(d => {\n      return d.id;\n    });\n};\n\nconst enterLink = (selection, inputEdgesArray) => {\n  return selection\n    .classed('link', true)\n    .append('g')\n    .attr('stroke', '#999')\n    .attr('stroke-opacity', 0.6)\n    .selectAll('line')\n    .data(inputEdgesArray)\n    .join('line')\n    .attr('stroke-width', d => Math.sqrt(d.value));\n};\n\nconst updateLink = selection => {\n  selection\n    .attr('x1', d => d.source.x)\n    .attr('y1', d => d.source.y)\n    .attr('x2', d => d.target.x)\n    .attr('y2', d => d.target.y);\n};\n\nconst restartGraph = (\n  nodeSelection,\n  newInputNodeArr,\n  themeColor,\n  dragFunction,\n  linkSelection,\n  newInputEdgeArr,\n  textSelection,\n  simulationSelector\n) => {\n  simulationSelector.nodes(newInputNodeArr);\n  simulationSelector.force('link').links(newInputEdgeArr);\n  simulationSelector.alpha(1).restart();\n  // Apply the general update pattern to the nodes.\n  nodeSelection = nodeSelection.data(newInputNodeArr, d => {\n    return d.id;\n  });\n  nodeSelection.exit().remove();\n  nodeSelection = nodeSelection\n    .enter()\n    .append('circle')\n    .attr('r', 10)\n    .style('fill', themeColor)\n    .merge(nodeSelection)\n    .call(dragFunction);\n\n  // Apply the general update pattern to the links.\n  linkSelection = linkSelection.data(newInputEdgeArr, d => {\n    return d.source.id + '-' + d.target.id;\n  });\n  linkSelection.exit().remove();\n  linkSelection = linkSelection\n    .enter()\n    .append('line')\n    .merge(linkSelection);\n  if (textSelection) {\n    textSelection = textSelection.data(newInputNodeArr, d => {\n      return d.id;\n    });\n    textSelection.exit().remove();\n    textSelection = textSelection\n      .enter()\n      .append('text')\n      .text(function(d) {\n        return d.id;\n      })\n      .merge(textSelection)\n      .call(dragFunction);\n  }\n  return { nodeSelection, linkSelection, textSelection };\n};\n\n// const initializer = (svgElement, graph, onLabels) => {\n//   console.log('im called');\n//   let D3State = {\n//     nodesArray: graph.nodesArray,\n//     edgesArray: graph.edgesArray\n//   };\n\n//   let svg = D3.select(svgElement),\n//     width = svgElement.width.baseVal.value,\n//     height = svgElement.height.baseVal.value;\n\n//   const simulation = D3.forceSimulation(D3State.nodesArray)\n//     .force(\n//       'link',\n//       D3.forceLink(D3State.edgesArray)\n//         .distance(width / 20)\n//         .id(d => d.id)\n//     )\n//     .force('charge', D3.forceManyBody())\n//     .force('center', D3.forceCenter(width * 0.6, height / 2));\n\n// const drag = simulation => {\n//   const dragstarted = d => {\n//     if (!D3.event.active) simulation.alphaTarget(0.3).restart();\n//     d.fx = d.x;\n//     d.fy = d.y;\n//   };\n\n//   const dragged = d => {\n//     d.fx = D3.event.x;\n//     d.fy = D3.event.y;\n//   };\n\n//   const dragended = d => {\n//     if (!D3.event.active) simulation.alphaTarget(0);\n//     d.fx = null;\n//     d.fy = null;\n//   };\n\n//   return D3.drag()\n//     .on('start', dragstarted)\n//     .on('drag', dragged)\n//     .on('end', dragended);\n// };\n\n//   let themeColor = '#5B8BDA';\n\n//   let node = svg\n//     .append('g')\n//     .attr('stroke', '#fff')\n//     .attr('stroke-width', 1.5)\n//     .selectAll('circle')\n//     .data(D3State.nodesArray)\n//     .join('circle')\n//     .attr('r', 10)\n//     .style('fill', themeColor)\n//     .call(drag(simulation));\n\n//   let text = svg\n//     .append('g')\n//     .attr('stroke', '#999')\n//     .selectAll('text')\n//     .data(D3State.nodesArray)\n//     .join('text')\n//     .text(function(d) {\n//       return d.id;\n//     });\n\n//   let link = svg\n//     .append('g')\n//     .attr('stroke', '#999')\n//     .attr('stroke-opacity', 0.6)\n//     .selectAll('line')\n//     .data(D3State.edgesArray)\n//     .join('line')\n//     .attr('stroke-width', d => Math.sqrt(d.value));\n\n//   simulation.on('tick', () => {\n//     if (onLabels) {\n//       text.attr('x', d => d.x + 10).attr('dy', d => d.y);\n//     }\n//     node.attr('cx', d => d.x).attr('cy', d => d.y);\n\n//     link\n//       .attr('x1', d => d.source.x)\n//       .attr('y1', d => d.source.y)\n//       .attr('x2', d => d.target.x)\n//       .attr('y2', d => d.target.y);\n//   });\n\n//     // Update and restart the simulation.\n//     simulation.nodes(D3State.nodesArray);\n//     simulation.force('link').links(D3State.edgesArray);\n//     simulation.alpha(1).restart();\n//   };\n\n//   D3.interval(\n//     () => {\n//       if (updaterIsCalled) {\n//         updaterIsCalled = false;\n//         D3State = { ...newState };\n//         newState = null;\n//         restart();\n//       }\n//       if (resetState) {\n//         console.log('im called');\n//         resetState = false;\n//         D3State = {};\n//         return;\n//       }\n//     },\n//     1,\n//     D3.now()\n//   );\n// };\n\n// const updater = newGraph => {\n//   updaterIsCalled = true;\n//   newState = newGraph;\n// };\n\n// const stateResetter = () => {\n//   resetState = true;\n// };\n\nexport {\n  enterNode,\n  enterLink,\n  updateLink,\n  enterText,\n  restartGraph,\n  simulationCreator\n};\n","import React, { Component, ReactSVGElement } from 'react';\nimport * as D3 from 'd3';\nimport * as svgMounter from '../../../D3Mounter/D3Mounter.js';\nimport { Node, Edge } from '../../../sharedTypes';\n\nclass SvgComponent extends Component<\n  {},\n  { intervalId: number; d3Timer?: D3.Timer }\n> {\n  myRef: React.RefObject<SVGSVGElement>;\n  constructor(props: {}) {\n    super(props);\n    this.state = { intervalId: -1 };\n    this.myRef = React.createRef<SVGSVGElement>();\n  }\n  componentDidMount = () => {\n    if (!this.myRef.current) return;\n    let nodesArray: Node[] = [\n      { id: 'a' },\n      { id: 'b' },\n      { id: 'c' },\n      { id: 'd' }\n    ];\n    let edgesArray: Edge[] = [\n      { source: 'a', value: 1, target: 'b' },\n      { source: 'a', value: 1, target: 'c' },\n      { source: 'b', value: 1, target: 'c' },\n      { source: 'd', value: 1, target: 'b' }\n    ];\n\n    let copyNodes: Node[] = nodesArray.map(element => {\n      return JSON.parse(JSON.stringify(element));\n    });\n\n    let copyEdges: Edge[] = edgesArray.map(element => {\n      return JSON.parse(JSON.stringify(element));\n    });\n\n    let d3Graph = D3.select(this.myRef.current);\n    let width = this.myRef.current.width.baseVal.value;\n    let height = this.myRef.current.height.baseVal.value;\n\n    const simulation = svgMounter.simulationCreator(\n      copyNodes,\n      copyEdges,\n      height,\n      width\n    );\n\n    const drag = (simulation: any) => {\n      const dragstarted = (d: any) => {\n        if (!D3.event.active) simulation.alphaTarget(0.3).restart();\n        d.fx = d.x;\n        d.fy = d.y;\n      };\n\n      const dragged = (d: any) => {\n        d.fx = D3.event.x;\n        d.fy = D3.event.y;\n      };\n\n      const dragended = (d: any) => {\n        if (!D3.event.active) simulation.alphaTarget(0);\n        d.fx = null;\n        d.fy = null;\n      };\n\n      return D3.drag()\n        .on('start', dragstarted)\n        .on('drag', dragged)\n        .on('end', dragended);\n    };\n\n    let node = svgMounter.enterNode(\n      d3Graph,\n      copyNodes,\n      '#5B8BDA',\n      drag(simulation)\n    );\n\n    let link = svgMounter.enterLink(d3Graph, copyEdges);\n\n    simulation.on('tick', () => {\n      node.attr('cx', (d: any) => d.x).attr('cy', (d: any) => d.y);\n\n      link\n        .attr('x1', (d: any) => d.source.x)\n        .attr('y1', (d: any) => d.source.y)\n        .attr('x2', (d: any) => d.target.x)\n        .attr('y2', (d: any) => d.target.y);\n    });\n\n    const intervalId = window.setInterval(() => {\n      if (nodesArray.length < 8) {\n        let randomGenerated = Math.random().toString();\n        let randomTarget = Math.floor(Math.random() * nodesArray.length) - 1;\n        if (randomTarget === -1) {\n          randomTarget = 0;\n        }\n        let otherRandom = Math.floor(Math.random() * nodesArray.length) - 1;\n        if (otherRandom === -1) {\n          otherRandom = 0;\n        }\n        nodesArray = [...nodesArray, { id: randomGenerated }];\n        edgesArray = [\n          ...edgesArray,\n          {\n            source: randomGenerated,\n            value: 1,\n            target: nodesArray[randomTarget].id\n          }\n        ];\n\n        copyNodes = nodesArray.map(element => {\n          return JSON.parse(JSON.stringify(element));\n        });\n\n        copyEdges = edgesArray.map(element => {\n          return JSON.parse(JSON.stringify(element));\n        });\n\n        let newGraph = svgMounter.restartGraph(\n          node,\n          copyNodes,\n          '#5B8BDA',\n          drag(simulation),\n          link,\n          copyEdges,\n          null,\n          simulation\n        );\n        node = newGraph.nodeSelection;\n        link = newGraph.linkSelection;\n      }\n    }, 2000);\n\n    this.setState({ intervalId });\n  };\n\n  render() {\n    return <svg ref={this.myRef} width=\"100vw\" height=\"100vh\" />;\n  }\n\n  componentWillUnmount() {\n    if (this.state.intervalId) {\n      window.clearInterval(this.state.intervalId);\n    }\n    if (this.state.d3Timer) {\n      this.state.d3Timer.stop();\n    }\n  }\n}\n\nexport default SvgComponent;\n","import React, { Component } from 'react';\nimport SvgBackground from './FrontPageBackground/frontPageBackground';\nimport './Home.scss';\nimport { Link } from 'react-router-dom';\n\nclass Home extends Component {\n  render() {\n    return (\n      <div>\n        <div className=\"landing\">\n          <h1>\n            Graphalizer<span className=\"loader__dot\">.</span>\n            <span className=\"loader__dot\">.</span>\n            <span className=\"loader__dot\">.</span>\n          </h1>\n          <h2>Data visualization learning tool</h2>\n          <Link to=\"/grapher\">\n            <button>Get Started</button>\n          </Link>\n        </div>\n        <SvgBackground />\n      </div>\n    );\n  }\n}\n\nexport default Home;\n","import * as D3 from 'd3';\n\nexport interface Node extends D3.SimulationNodeDatum {\n  id: string | D3Source;\n}\n\nexport interface ClusterNode extends D3.SimulationNodeDatum {\n  id: string | D3Source;\n  radius: number;\n  color: string;\n}\n\nexport interface Edge extends D3.SimulationLinkDatum<Node> {\n  source: string | D3Source;\n  value: number;\n  target: string | D3Target;\n}\nexport interface Graph {\n  nodesArray: Node[];\n  edgesArray: Edge[];\n}\n\nexport const isD3Source = (maybeD3Source: any): maybeD3Source is D3Source =>\n  typeof maybeD3Source === 'object' && maybeD3Source.hasOwnProperty('id');\n\nexport const isD3Target = (maybeD3Source: any): maybeD3Source is D3Source =>\n  typeof maybeD3Source === 'object' && maybeD3Source.hasOwnProperty('id');\n\nexport interface D3Source {\n  id: string;\n}\nexport interface D3Target {\n  id: string;\n}\n","import React, { Component, ReactSVGElement } from 'react';\nimport * as D3 from 'd3';\nimport './Navbar.scss';\nimport { ClusterNode, Node } from '../../sharedTypes';\nimport { Link } from 'react-router-dom';\n\nclass NavBar extends Component<{}, { intervalId: number; d3Timer?: D3.Timer }> {\n  myRef: React.RefObject<SVGSVGElement>;\n  constructor(props: {}) {\n    super(props);\n    this.state = { intervalId: -1 };\n    this.myRef = React.createRef<SVGSVGElement>();\n  }\n  componentDidMount = () => {\n    if (!this.myRef.current) return;\n    let nodesArray: ClusterNode[] = [{ id: 'a', radius: 25, color: '#f8f8ff' }];\n\n    for (let i = 0; i < 50; i++) {\n      nodesArray.push({\n        id: Math.random().toString(),\n        radius: Math.floor(Math.random() * 8),\n        color: '#' + ((Math.random() * 0xffffff) << 0).toString(16)\n      });\n    }\n\n    console.log(nodesArray);\n\n    let copyNodes: Node[] = nodesArray.map(element => {\n      return JSON.parse(JSON.stringify(element));\n    });\n\n    let d3Graph = D3.select(this.myRef.current);\n    let width = this.myRef.current.width.baseVal.value;\n    let height = this.myRef.current.height.baseVal.value;\n\n    const simulation = D3.forceSimulation(copyNodes)\n      .force('charge', D3.forceManyBody().strength(2))\n      .force('center', D3.forceCenter(width / 2, height / 2))\n      .force('collision', D3.forceCollide().radius((d: any) => d.radius));\n    const drag = (simulation: any): any => {\n      const dragstarted = (d: any) => {\n        if (!D3.event.active) simulation.alphaTarget(0.3).restart();\n        d.fx = d.x;\n        d.fy = d.y;\n      };\n\n      const dragged = (d: any) => {\n        d.fx = D3.event.x;\n        d.fy = D3.event.y;\n      };\n\n      const dragended = (d: any) => {\n        if (!D3.event.active) simulation.alphaTarget(0);\n        d.fx = null;\n        d.fy = null;\n      };\n\n      return D3.drag()\n        .on('start', dragstarted)\n        .on('drag', dragged)\n        .on('end', dragended);\n    };\n\n    let node = d3Graph\n      .classed('forceNode', true)\n      .append('g')\n      .attr('stroke', '#f8f8ff')\n      .attr('stroke-width', 1.5)\n      .selectAll('circle')\n      .data(copyNodes)\n      .join('circle')\n      .attr('r', (d: any) => d.radius)\n      .style('fill', (d: any) => d.color)\n      .call(drag(simulation));\n\n    simulation.on('tick', () => {\n      node.attr('cx', (d: any) => d.x).attr('cy', (d: any) => d.y);\n    });\n  };\n\n  render() {\n    return (\n      <div className=\"navbar\">\n        <Link to=\"/\">\n          <h1>\n            Graphalizer<span className=\"loader__dot\">.</span>\n            <span className=\"loader__dot\">.</span>\n            <span className=\"loader__dot\">.</span>\n          </h1>\n        </Link>\n        <Link to=\"/grapher\">\n          <h3>\n            Graphing Field<span className=\"loader__dot\">.</span>\n            <span className=\"loader__dot\">.</span>\n            <span className=\"loader__dot\">.</span>\n          </h3>\n        </Link>\n        <Link to=\"/gdp\">\n          <h2>\n            Samples<span className=\"loader__dot\">.</span>\n            <span className=\"loader__dot\">.</span>\n            <span className=\"loader__dot\">.</span>\n          </h2>\n        </Link>\n        <h4>\n          About Me<span className=\"loader__dot\">.</span>\n          <span className=\"loader__dot\">.</span>\n          <span className=\"loader__dot\">.</span>\n        </h4>\n        <svg ref={this.myRef} width=\"15vw\" height=\"10vh\" className=\"navsvg\">\n          <rect width=\"100%\" height=\"100%\" fill=\"#f8f8ff\" />\n        </svg>\n      </div>\n    );\n  }\n}\n\nexport default NavBar;\n","import React, { Component, ChangeEvent } from 'react';\nimport { connect } from 'react-redux';\nimport * as Actions from './GrapherAction';\nimport * as svgMounter from '../../D3Mounter/D3Mounter.js';\nimport { Graph, isD3Source, isD3Target, Edge } from '../../sharedTypes';\nimport nodeIMG from '../../assets/node.png';\nimport edgeIMG from '../../assets/edge.jpg';\nimport * as D3 from 'd3';\nimport NavBar from '../Navbar/Navbar';\n\nimport './Grapher.scss';\n\ninterface GrapherState {\n  node_id: string;\n  node_id_message: string;\n  edge_source: string;\n  edge_source_message: string;\n  edge_weight: number;\n  edge_weight_message: string;\n  edge_target: string;\n  edge_target_message: string;\n  node_form_visibility: boolean;\n  node_list_visibility: boolean;\n  edge_form_visibility: boolean;\n  edge_list_visibility: boolean;\n  d3node: any;\n  d3link: any;\n  d3text: any;\n  d3Graph: any;\n  simulation: any;\n  drag: any;\n}\n\ninterface GrapherStateProps {\n  graph: Graph;\n}\ninterface GrapherDispatchProps {\n  addNode: (postdata: { id: string }) => void;\n  addEdge: (postdata: {\n    source: string;\n    value: number;\n    target: string;\n  }) => void;\n}\ntype GrapherProps = GrapherStateProps & GrapherDispatchProps;\n\nclass Grapher extends Component<GrapherProps, GrapherState> {\n  myRef: React.RefObject<SVGSVGElement>;\n  constructor(props: GrapherProps) {\n    super(props);\n    this.state = {\n      node_id: '',\n      node_id_message: '',\n      edge_source: '',\n      edge_source_message: '',\n      edge_weight: 0,\n      edge_weight_message: '',\n      edge_target: '',\n      edge_target_message: '',\n      node_form_visibility: false,\n      node_list_visibility: false,\n      edge_form_visibility: false,\n      edge_list_visibility: false,\n      d3node: null,\n      d3link: null,\n      d3text: null,\n      d3Graph: null,\n      simulation: null,\n      drag: null\n    };\n    this.myRef = React.createRef<SVGSVGElement>();\n  }\n\n  componentDidMount = () => {\n    if (this.myRef.current === null) return;\n    let copyNodes: Node[] = this.props.graph.nodesArray.map(element => {\n      return JSON.parse(JSON.stringify(element));\n    });\n\n    let copyEdges: Edge[] = this.props.graph.edgesArray.map(element => {\n      return JSON.parse(JSON.stringify(element));\n    });\n\n    let d3Graph = D3.select(this.myRef.current);\n    console.log(d3Graph);\n    let width = this.myRef.current.width.baseVal.value;\n    let height = this.myRef.current.height.baseVal.value;\n\n    const simulation = svgMounter.simulationCreator(\n      copyNodes,\n      copyEdges,\n      height,\n      width\n    );\n\n    const drag = (simulation: any) => {\n      const dragstarted = (d: any) => {\n        if (!D3.event.active) simulation.alphaTarget(0.3).restart();\n        d.fx = d.x;\n        d.fy = d.y;\n      };\n\n      const dragged = (d: any) => {\n        d.fx = D3.event.x;\n        d.fy = D3.event.y;\n      };\n\n      const dragended = (d: any) => {\n        if (!D3.event.active) simulation.alphaTarget(0);\n        d.fx = null;\n        d.fy = null;\n      };\n\n      return D3.drag()\n        .on('start', dragstarted)\n        .on('drag', dragged)\n        .on('end', dragended);\n    };\n\n    let d3node = svgMounter.enterNode(\n      d3Graph,\n      copyNodes,\n      '#5B8BDA',\n      drag(simulation)\n    );\n\n    let d3link = svgMounter.enterLink(d3Graph, copyEdges);\n    let d3text = svgMounter.enterText(d3Graph, copyNodes);\n    this.setState({ d3node, d3text, d3link, d3Graph, drag, simulation });\n\n    simulation.on('tick', () => {\n      d3node.attr('cx', (d: any) => d.x).attr('cy', (d: any) => d.y);\n      d3text.attr('x', (d: any) => d.x + 10).attr('dy', (d: any) => d.y);\n\n      d3link\n        .attr('x1', (d: any) => d.source.x)\n        .attr('y1', (d: any) => d.source.y)\n        .attr('x2', (d: any) => d.target.x)\n        .attr('y2', (d: any) => d.target.y);\n    });\n  };\n\n  handleChange = (\n    event: ChangeEvent<HTMLInputElement> | ChangeEvent<HTMLSelectElement>\n  ) => {\n    if (event.target !== null) {\n      const { name, value } = event.target;\n      this.setState({\n        [name]: value\n      } as any);\n    }\n  };\n\n  nodeListVis = (event: React.MouseEvent<HTMLButtonElement, MouseEvent>) => {\n    event.preventDefault();\n    if (!this.state.node_list_visibility) {\n      this.setState({ node_list_visibility: true });\n    } else {\n      this.setState({ node_list_visibility: false });\n    }\n  };\n\n  nodeFormVis = (event: React.MouseEvent<HTMLButtonElement, MouseEvent>) => {\n    event.preventDefault();\n    if (!this.state.node_form_visibility) {\n      this.setState({ node_form_visibility: true });\n    } else {\n      this.setState({ node_form_visibility: false });\n    }\n  };\n\n  edgeListVis = (event: React.MouseEvent<HTMLButtonElement, MouseEvent>) => {\n    event.preventDefault();\n    if (!this.state.edge_list_visibility) {\n      this.setState({ edge_list_visibility: true });\n    } else {\n      this.setState({ edge_list_visibility: false });\n    }\n  };\n\n  edgeFormVis = (event: React.MouseEvent<HTMLButtonElement, MouseEvent>) => {\n    event.preventDefault();\n    if (!this.state.edge_form_visibility) {\n      this.setState({ edge_form_visibility: true });\n    } else {\n      this.setState({ edge_form_visibility: false });\n    }\n  };\n\n  handleNodeSubmit = (\n    event: React.MouseEvent<HTMLButtonElement, MouseEvent>\n  ) => {\n    event.preventDefault();\n    const reducerData = this.props.graph.nodesArray;\n    let uniqueId = new Set();\n    reducerData.forEach(element => {\n      uniqueId.add(element.id);\n    });\n\n    event.preventDefault();\n    this.setState({\n      node_id_message: ''\n    });\n    if (this.state.node_id.length <= 0) {\n      this.setState({\n        node_id_message: 'Empty field, please enter information'\n      });\n    } else if (uniqueId.has(this.state.node_id)) {\n      this.setState({\n        node_id_message: 'ID already taken, please set a new ID'\n      });\n    } else if (\n      this.state.node_id.length > 0 &&\n      !uniqueId.has(this.state.node_id)\n    ) {\n      let postData = { id: this.state.node_id };\n      this.props.addNode(postData);\n\n      this.setState({ node_form_visibility: false }, () => {\n        let copyNodes: Node[] = this.props.graph.nodesArray.map(element => {\n          return JSON.parse(JSON.stringify(element));\n        });\n\n        let copyEdges: Edge[] = this.props.graph.edgesArray.map(element => {\n          return JSON.parse(JSON.stringify(element));\n        });\n        let d3Graph = D3.select(this.myRef.current);\n        let d3node = d3Graph.selectAll('.node');\n        let d3text = d3Graph.selectAll('.desc');\n\n        let d3link = d3Graph.selectAll('.link');\n        let newGraphSelection = svgMounter.restartGraph(\n          this.state.d3node,\n          copyNodes,\n          '#5B8BDA',\n          this.state.drag(this.state.simulation),\n          this.state.d3link,\n          copyEdges,\n          this.state.d3text,\n          this.state.simulation\n        );\n        d3node = newGraphSelection.nodeSelection;\n        d3text = newGraphSelection.textSelection;\n        d3link = newGraphSelection.linkSelection;\n\n        this.state.simulation.on('tick', () => {\n          d3node.attr('cx', (d: any) => d.x).attr('cy', (d: any) => d.y);\n          d3text.attr('x', (d: any) => d.x + 10).attr('dy', (d: any) => d.y);\n\n          d3link\n            .attr('x1', (d: any) => d.source.x)\n            .attr('y1', (d: any) => d.source.y)\n            .attr('x2', (d: any) => d.target.x)\n            .attr('y2', (d: any) => d.target.y);\n        });\n        this.setState({ d3link, d3node, d3text });\n      });\n    }\n  };\n\n  handleEdgeSubmit = (\n    event: React.MouseEvent<HTMLButtonElement, MouseEvent>\n  ) => {\n    event.preventDefault();\n    console.log('clicked');\n    this.setState({\n      edge_source_message: '',\n      edge_target_message: '',\n      edge_weight_message: ''\n    });\n    if (this.state.edge_source.length <= 0) {\n      this.setState({\n        edge_source_message:\n          'Please select a source node or create a node first'\n      });\n    }\n    if (this.state.edge_weight <= 0) {\n      this.setState({\n        edge_weight_message: 'Please enter a weight for the edge'\n      });\n    }\n    if (this.state.edge_target.length <= 0) {\n      this.setState({\n        edge_target_message:\n          'Please select a target node or create a node first'\n      });\n    }\n    if (\n      this.state.edge_source.length > 0 &&\n      this.state.edge_weight > 0 &&\n      this.state.edge_target.length > 0\n    ) {\n      let postData = {\n        source: this.state.edge_source,\n        value: this.state.edge_weight,\n        target: this.state.edge_target\n      };\n\n      this.props.addEdge(postData);\n\n      this.setState({ edge_form_visibility: false }, () => {\n        let copyNodes: Node[] = this.props.graph.nodesArray.map(element => {\n          return JSON.parse(JSON.stringify(element));\n        });\n\n        let copyEdges: Edge[] = this.props.graph.edgesArray.map(element => {\n          return JSON.parse(JSON.stringify(element));\n        });\n        let d3Graph = D3.select(this.myRef.current);\n\n        let d3node = d3Graph.selectAll('.node');\n        let d3text = d3Graph.selectAll('.desc');\n\n        let d3link = d3Graph.selectAll('.link');\n        let newGraphSelection = svgMounter.restartGraph(\n          this.state.d3node,\n          copyNodes,\n          '#5B8BDA',\n          this.state.drag(this.state.simulation),\n          this.state.d3link,\n          copyEdges,\n          this.state.d3text,\n          this.state.simulation\n        );\n        d3node = newGraphSelection.nodeSelection;\n        d3text = newGraphSelection.textSelection;\n        d3link = newGraphSelection.linkSelection;\n        console.log(d3link);\n        this.state.simulation.on('tick', () => {\n          d3node.attr('cx', (d: any) => d.x).attr('cy', (d: any) => d.y);\n          d3text.attr('x', (d: any) => d.x + 10).attr('dy', (d: any) => d.y);\n\n          d3link\n            .attr('x1', (d: any) => d.source.x)\n            .attr('y1', (d: any) => d.source.y)\n            .attr('x2', (d: any) => d.target.x)\n            .attr('y2', (d: any) => d.target.y);\n        });\n\n        this.setState({ d3link, d3node, d3text });\n      });\n    }\n  };\n\n  render() {\n    console.log(this.props.graph.edgesArray);\n    return (\n      <div>\n        <NavBar />\n\n        <svg ref={this.myRef} width=\"65vw\" height=\"90vh\" />\n        <div className=\"controlPanel\">\n          <div className=\"nodeArea\">\n            <h1>nodes</h1>\n            <button onClick={event => this.nodeListVis(event)}>\n              {this.state.node_list_visibility ? 'hide list' : 'expand list'}\n            </button>\n            <button onClick={this.nodeFormVis}>add a node</button>\n            {this.state.node_list_visibility ? (\n              <ul>\n                {this.props.graph.nodesArray.map((element, index) => {\n                  return (\n                    <div className=\"list-cards\">\n                      <img src={nodeIMG} />\n                      <li key={index}>node {element.id}</li>\n                    </div>\n                  );\n                })}\n              </ul>\n            ) : null}\n\n            {this.state.node_form_visibility ? (\n              <form>\n                <label htmlFor=\"node_id\">node name</label>\n                <input\n                  type=\"text\"\n                  name=\"node_id\"\n                  onChange={this.handleChange}\n                />\n\n                <p>{this.state.node_id_message}</p>\n                <button type=\"submit\" onClick={this.handleNodeSubmit}>\n                  create node\n                </button>\n              </form>\n            ) : null}\n          </div>\n          <div className=\"edgeArea\">\n            <h1>edges</h1>\n            <button onClick={this.edgeListVis}>\n              {this.state.edge_list_visibility ? 'hide list' : 'expand list'}\n            </button>\n            <button onClick={this.edgeFormVis}>add edge</button>\n            {this.state.edge_list_visibility ? (\n              <div className=\"edgeList\">\n                {this.props.graph.edgesArray.map((element, index) => {\n                  return (\n                    <div key={index} className=\"edge-list\">\n                      <img src={edgeIMG} />\n                      <div className=\"edge-info\">\n                        <h2>source node: {element.source}</h2>\n                        <h2>weight of edge:{element.value}</h2>\n                        <h2>target node: {element.target}</h2>\n                      </div>\n                    </div>\n                  );\n                })}\n              </div>\n            ) : null}\n\n            {this.state.edge_form_visibility ? (\n              <form>\n                <label htmlFor=\"edge_source\">source node</label>\n                <select name=\"edge_source\" onChange={this.handleChange}>\n                  <option value=\"\">Source Node</option>\n                  {this.props.graph.nodesArray.map((element, index) => {\n                    return isD3Target(element) ? (\n                      <option value={element.id} key={index}>\n                        {element.id}\n                      </option>\n                    ) : null;\n                  })}\n                </select>\n                <p>{this.state.edge_source_message}</p>\n\n                <label htmlFor=\"edge_weight\">edge thickness</label>\n                <input\n                  type=\"number\"\n                  name=\"edge_weight\"\n                  min=\"0\"\n                  onChange={this.handleChange}\n                />\n                <p>{this.state.edge_weight_message}</p>\n                <label htmlFor=\"edge_target\">target node</label>\n                <select name=\"edge_target\" onChange={this.handleChange}>\n                  <option value=\"\">Node Target</option>\n                  {this.props.graph.nodesArray.map((element, index) => {\n                    return isD3Target(element) ? (\n                      <option value={element.id} key={index}>\n                        {element.id}\n                      </option>\n                    ) : null;\n                  })}\n                </select>\n                <p>{this.state.edge_target_message}</p>\n                <button type=\"submit\" onClick={this.handleEdgeSubmit}>\n                  Create Edge\n                </button>\n              </form>\n            ) : null}\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nconst mapStateToProps = (reducerState: Graph): GrapherStateProps => ({\n  graph: reducerState\n});\n\nconst mapDispatchToProps = (dispatch: any): GrapherDispatchProps => ({\n  addNode: newNode => dispatch(Actions.nodeAdder(newNode)),\n  addEdge: newEdge => dispatch(Actions.edgeAdder(newEdge))\n});\n\nexport default connect(\n  mapStateToProps,\n  mapDispatchToProps\n)(Grapher);\n","const nodeAdder = (payload: any) => {\n  return {\n    type: 'GRAPHADDNODE',\n    payload: payload\n  };\n};\n\nconst edgeAdder = (payload: any) => {\n  console.log(payload);\n  return {\n    type: 'GRAPHADDEDGE',\n    payload: payload\n  };\n};\nexport { nodeAdder, edgeAdder };\n","import React, { Component, ReactSVGElement } from 'react';\nimport * as D3 from 'd3';\nimport countryJSON from '../../assets/country.json';\nimport gdpJSON from '../../assets/gdp.json';\nimport Navbar from '../Navbar/Navbar';\nimport './GDP.scss';\n\nclass GDPSvg extends Component<{}> {\n  myRef: React.RefObject<SVGSVGElement>;\n  constructor(props: {}) {\n    super(props);\n    this.myRef = React.createRef<SVGSVGElement>();\n  }\n  componentDidMount = () => {\n    if (!this.myRef.current) return;\n    const countryInfo = new Map();\n    gdpJSON.forEach(element => {\n      if (element.value) {\n        countryInfo.set(element.country.id, { gdp: element.value });\n      }\n    });\n    let countryCategories = new Map();\n    countryCategories.set('Latin America & Caribbean ', 1);\n    countryCategories.set('South Asia', 2);\n    countryCategories.set('Sub-Saharan Africa ', 3);\n    countryCategories.set('Europe & Central Asia', 4);\n    countryCategories.set('Aggregates', 5);\n    countryCategories.set('Middle East & North Africa', 6);\n    countryCategories.set('East Asia & Pacific', 7);\n    countryCategories.set('North America', 8);\n\n    countryJSON.forEach(element => {\n      let countryObj = countryInfo.get(element.iso2Code);\n      if (countryObj) {\n        countryObj.id = element.name;\n        countryObj.cluster = countryCategories.get(element.region.value);\n        countryObj.region = element.region.value;\n        countryInfo.set(element.iso2Code, countryObj);\n      }\n    });\n\n    const arrayOfCountries: any[] = [];\n    countryInfo.forEach(value => {\n      arrayOfCountries.push(value);\n    });\n\n    let filteredCountries = arrayOfCountries.filter(element => {\n      return element.cluster != 5;\n    });\n\n    console.log(filteredCountries);\n\n    let d3Graph = D3.select(this.myRef.current);\n    let width = this.myRef.current.width.baseVal.value;\n    let height = this.myRef.current.height.baseVal.value;\n\n    const simulation = D3.forceSimulation(filteredCountries)\n      .force('charge', D3.forceManyBody().strength(1))\n      .force('center', D3.forceCenter(width / 2, height / 2))\n      .force(\n        'collide',\n        D3.forceCollide().radius((d: any) => {\n          return Math.cbrt(d.gdp) / 300;\n        })\n      );\n\n    let tooltip = D3.select('body')\n      .append('div')\n      .style('position', 'absolute')\n      .style('z-index', '10')\n      .style('visibility', 'hidden')\n      .style('background', ' #e6e6ff')\n      .style('padding', '10px')\n      .style('opacity', 0.9)\n      .style('font-size', '30px')\n      .style('color', 'gray')\n      .style('border-radius', '3px')\n      .style('font-family', `'Courier New', Courier, monospace`);\n\n    const drag = (simulation: any): any => {\n      const dragstarted = (d: any) => {\n        if (!D3.event.active) simulation.alphaTarget(0.3).restart();\n        d.fx = d.x;\n        d.fy = d.y;\n      };\n\n      const dragged = (d: any) => {\n        d.fx = D3.event.x;\n        d.fy = D3.event.y;\n      };\n\n      const dragended = (d: any) => {\n        if (!D3.event.active) simulation.alphaTarget(0);\n        d.fx = null;\n        d.fy = null;\n      };\n\n      return D3.drag()\n        .on('start', dragstarted)\n        .on('drag', dragged)\n        .on('end', dragended);\n    };\n    let node = d3Graph\n      .classed('forceNode', true)\n      .append('g')\n      .attr('stroke', '#f8f8ff')\n      .attr('stroke-width', 1.5)\n      .selectAll('circle')\n      .data(filteredCountries)\n      .join('circle')\n      .attr('r', (d: any) => Math.cbrt(d.gdp) / 300)\n      .style('fill', (d: any) => {\n        switch (d.cluster) {\n          case 1:\n            return '#ff5959';\n          case 2:\n            return '#ff8859';\n          case 3:\n            return '#ffe059';\n          case 4:\n            return '#59ff9e';\n          case 5:\n            return '#59ffee';\n          case 6:\n            return '#59aeff';\n          case 7:\n            return '#7159ff';\n          case 8:\n            return '#db59ff';\n          default:\n            return 'black';\n        }\n      })\n      .on('mouseover', function(d) {\n        console.log(tooltip);\n        return tooltip\n          .style('visibility', 'visible')\n          .text(`Country: ${d.id}, Region:${d.region} GDP: $${d.gdp}`);\n      })\n      .on('mousemove', function(d) {\n        return tooltip\n          .style('top', height * 0.5 + 'px')\n          .style('left', width * 0.75 + 'px');\n      })\n      .on('mouseout', function() {\n        return tooltip.style('visibility', 'hidden');\n      })\n      .call(drag(simulation));\n\n    simulation.on('tick', () => {\n      node.attr('cx', (d: any) => d.x).attr('cy', (d: any) => d.y);\n    });\n  };\n\n  render() {\n    return (\n      <div className=\"gdp\">\n        <Navbar />\n        <div className=\"gdptext\">\n          <p>\n            This graph represents the GDP and regions of a country. This is type\n            of graph is known as the force clustered layout. The main advantages\n            are good-quality results, it's flexibility, intuitive simplicity,\n            interactivity, and strong theoretical foundations.\n          </p>\n        </div>\n        <svg ref={this.myRef} width=\"100vw\" height=\"85vh\" />\n      </div>\n    );\n  }\n}\n\nexport default GDPSvg;\n","import React, { Component } from 'react';\nimport { HashRouter, Route } from 'react-router-dom';\nimport Home from './components/Home/Home';\nimport Grapher from './components/Grapher/Grapher';\nimport GDP from './components/Examples/GDP';\nimport './reset.scss';\n\nclass App extends Component {\n  componentDidMount() {\n    document.title = 'Graphalizer';\n  }\n\n  render() {\n    return (\n      <HashRouter>\n        <Route path=\"/\" exact component={Home} />\n        <Route path=\"/grapher\" exact component={Grapher} />\n        <Route path=\"/gdp\" exact component={GDP} />\n      </HashRouter>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import { Graph, Edge, Node } from '../../sharedTypes';\n\nlet initialState: Graph = {\n  nodesArray: [],\n  edgesArray: []\n};\n\ntype Action =\n  | {\n      type: ActionTypes.GraphAddEdge;\n      payload: Edge;\n    }\n  | { type: ActionTypes.GraphAddNode; payload: Node };\nenum ActionTypes {\n  GraphAddNode = 'GRAPHADDNODE',\n  GraphAddEdge = 'GRAPHADDEDGE'\n}\nexport default (state = initialState, action: Action): Graph => {\n  switch (action.type) {\n    case ActionTypes.GraphAddNode:\n      return {\n        ...state,\n        nodesArray: [...state.nodesArray, action.payload]\n      };\n\n    case ActionTypes.GraphAddEdge:\n      return {\n        ...state,\n        edgesArray: [...state.edgesArray, action.payload]\n      };\n\n    default:\n      return state;\n  }\n};\n","export default (store: any) => (next: any) => (action: any) => {\n  console.log('__ACTION__', action);\n  try {\n    let result = next(action);\n    console.log('__STATE__', store.getState());\n    return result;\n  } catch (err) {\n    err.action = action;\n    console.error(err);\n    return err;\n  }\n};\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport { Provider } from 'react-redux';\nimport * as serviceWorker from './serviceWorker';\nimport createStore from './store/index';\n\nconst store = createStore();\n\nfunction Main() {\n  return (\n    <Provider store={store}>\n      <React.Fragment>\n        <App />\n      </React.Fragment>\n    </Provider>\n  );\n}\n\nReactDOM.render(<Main />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","import { createStore, combineReducers, applyMiddleware } from 'redux';\nimport reporter from './middleware/reporter';\n\nimport graphReducer from './reducer/graphReducer';\n\nexport default () => createStore(graphReducer, applyMiddleware(reporter));\n"],"sourceRoot":""}