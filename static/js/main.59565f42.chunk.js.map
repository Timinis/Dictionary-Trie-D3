{"version":3,"sources":["D3Mounter/D3Mounter.js","components/Home/FrontPageBackground/frontPageBackground.tsx","components/Home/Home.tsx","sharedTypes.ts","components/Grapher/Grapher.tsx","components/Grapher/GrapherAction.tsx","App.js","serviceWorker.js","store/reducer/graphReducer.ts","store/middleware/reporter.ts","index.js","store/index.ts"],"names":["simulationCreator","inputNodeArr","inputEdgesArr","height","width","D3","force","distance","id","d","radius","r","enterNode","selection","nodesArray","themeColor","dragFunction","classed","append","attr","selectAll","data","join","style","call","enterText","inputNodesArray","text","enterLink","inputEdgesArray","Math","sqrt","value","restartGraph","nodeSelection","newInputNodeArr","linkSelection","newInputEdgeArr","textSelection","simulationSelector","nodes","links","alpha","restart","exit","remove","enter","merge","source","target","SvgComponent","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","myRef","componentDidMount","current","edgesArray","copyNodes","map","element","JSON","parse","stringify","copyEdges","d3Graph","baseVal","simulation","svgMounter","drag","on","active","alphaTarget","fx","x","fy","y","node","link","intervalId","window","setInterval","length","randomGenerated","random","toString","randomTarget","floor","otherRandom","concat","toConsumableArray","newGraph","setState","state","React","createRef","react_default","a","createElement","ref","clearInterval","d3Timer","stop","Component","Home","className","react_router_dom","to","frontPageBackground","isD3Target","maybeD3Source","hasOwnProperty","Grapher","graph","d3node","d3link","d3text","handleChange","event","_event$target","name","defineProperty","nodeListVis","preventDefault","node_list_visibility","nodeFormVis","node_form_visibility","edgeListVis","edge_list_visibility","edgeFormVis","edge_form_visibility","handleNodeSubmit","reducerData","uniqueId","Set","forEach","add","node_id_message","node_id","has","postData","addNode","newGraphSelection","handleEdgeSubmit","console","log","edge_source_message","edge_target_message","edge_weight_message","edge_source","edge_weight","edge_target","addEdge","_this2","onClick","index","key","htmlFor","type","onChange","Fragment","min","connect","reducerState","dispatch","newNode","payload","newEdge","App","document","title","react_router","path","exact","component","Boolean","location","hostname","match","ActionTypes","reporter","store","next","action","result","getState","err","error","initialState","graphReducer","arguments","undefined","GraphAddNode","objectSpread","GraphAddEdge","createStore","applyMiddleware","ReactDOM","render","es","src_App","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.59565f42.chunk.js","sourcesContent":["import * as D3 from 'd3';\n\n// let updaterIsCalled = false;\n// let newState;\n// let resetState = false;\n\n// const D3EnvironmentSetter = (SvgComponent, reactGraph, labelsSetting) => {\n//   let environmentState = { ...reactGraph, needsUpdate: false };\n//   initializer(SvgComponent, environmentState, labelsSetting);\n//   window.setInterval(() => {\n//     if (updaterIsCalled) {\n//       environmentState =\n//     }\n//   });\n// };\n\nconst simulationCreator = (inputNodeArr, inputEdgesArr, height, width) => {\n  return D3.forceSimulation(inputNodeArr)\n    .force(\n      'link',\n      D3.forceLink(inputEdgesArr)\n        .distance(width / 20)\n        .id(d => d.id)\n    )\n    .force('charge', D3.forceManyBody())\n    .force('collision', D3.forceCollide().radius(d => d.r + 10))\n    .force('center', D3.forceCenter(width * 0.6, height / 2));\n};\n\nconst enterNode = (selection, nodesArray, themeColor, dragFunction) => {\n  return selection\n    .classed('node', true)\n    .append('g')\n    .attr('stroke', '#fff')\n    .attr('stroke-width', 1.5)\n    .selectAll('circle')\n    .data(nodesArray)\n    .join('circle')\n    .attr('r', 10)\n    .style('fill', themeColor)\n    .call(dragFunction);\n};\n\nconst enterText = (selection, inputNodesArray) => {\n  return selection\n    .classed('desc', true)\n    .append('g')\n    .attr('stroke', '#999')\n    .selectAll('text')\n    .data(inputNodesArray)\n    .join('text')\n    .text(d => {\n      return d.id;\n    });\n};\n\nconst updateNode = selection => {\n  selection.attr('transform', d => 'translate(' + d.x + ',' + d.y + ')');\n};\n\nconst enterLink = (selection, inputEdgesArray) => {\n  return selection\n    .classed('link', true)\n    .append('g')\n    .attr('stroke', '#999')\n    .attr('stroke-opacity', 0.6)\n    .selectAll('line')\n    .data(inputEdgesArray)\n    .join('line')\n    .attr('stroke-width', d => Math.sqrt(d.value));\n};\n\nconst updateLink = selection => {\n  selection\n    .attr('x1', d => d.source.x)\n    .attr('y1', d => d.source.y)\n    .attr('x2', d => d.target.x)\n    .attr('y2', d => d.target.y);\n};\n\nconst updateGraph = selection => {\n  selection.selectAll('.node').call(updateNode);\n  selection.selectAll('.link').call(updateLink);\n};\n\nconst restartGraph = (\n  nodeSelection,\n  newInputNodeArr,\n  themeColor,\n  dragFunction,\n  linkSelection,\n  newInputEdgeArr,\n  textSelection,\n  simulationSelector\n) => {\n  simulationSelector.nodes(newInputNodeArr);\n  simulationSelector.force('link').links(newInputEdgeArr);\n  simulationSelector.alpha(1).restart();\n  // Apply the general update pattern to the nodes.\n  nodeSelection = nodeSelection.data(newInputNodeArr, d => {\n    return d.id;\n  });\n  nodeSelection.exit().remove();\n  nodeSelection = nodeSelection\n    .enter()\n    .append('circle')\n    .attr('r', 10)\n    .style('fill', themeColor)\n    .merge(nodeSelection)\n    .call(dragFunction);\n\n  // Apply the general update pattern to the links.\n  linkSelection = linkSelection.data(newInputEdgeArr, d => {\n    return d.source.id + '-' + d.target.id;\n  });\n  linkSelection.exit().remove();\n  linkSelection = linkSelection\n    .enter()\n    .append('line')\n    .merge(linkSelection);\n  if (textSelection) {\n    textSelection = textSelection.data(newInputNodeArr, d => {\n      return d.id;\n    });\n    textSelection.exit().remove();\n    textSelection = textSelection\n      .enter()\n      .append('text')\n      .text(function(d) {\n        return d.id;\n      })\n      .merge(textSelection)\n      .call(dragFunction);\n  }\n  return { nodeSelection, linkSelection, textSelection };\n};\n\n// const initializer = (svgElement, graph, onLabels) => {\n//   console.log('im called');\n//   let D3State = {\n//     nodesArray: graph.nodesArray,\n//     edgesArray: graph.edgesArray\n//   };\n\n//   let svg = D3.select(svgElement),\n//     width = svgElement.width.baseVal.value,\n//     height = svgElement.height.baseVal.value;\n\n//   const simulation = D3.forceSimulation(D3State.nodesArray)\n//     .force(\n//       'link',\n//       D3.forceLink(D3State.edgesArray)\n//         .distance(width / 20)\n//         .id(d => d.id)\n//     )\n//     .force('charge', D3.forceManyBody())\n//     .force('center', D3.forceCenter(width * 0.6, height / 2));\n\n// const drag = simulation => {\n//   const dragstarted = d => {\n//     if (!D3.event.active) simulation.alphaTarget(0.3).restart();\n//     d.fx = d.x;\n//     d.fy = d.y;\n//   };\n\n//   const dragged = d => {\n//     d.fx = D3.event.x;\n//     d.fy = D3.event.y;\n//   };\n\n//   const dragended = d => {\n//     if (!D3.event.active) simulation.alphaTarget(0);\n//     d.fx = null;\n//     d.fy = null;\n//   };\n\n//   return D3.drag()\n//     .on('start', dragstarted)\n//     .on('drag', dragged)\n//     .on('end', dragended);\n// };\n\n//   let themeColor = '#5B8BDA';\n\n//   let node = svg\n//     .append('g')\n//     .attr('stroke', '#fff')\n//     .attr('stroke-width', 1.5)\n//     .selectAll('circle')\n//     .data(D3State.nodesArray)\n//     .join('circle')\n//     .attr('r', 10)\n//     .style('fill', themeColor)\n//     .call(drag(simulation));\n\n//   let text = svg\n//     .append('g')\n//     .attr('stroke', '#999')\n//     .selectAll('text')\n//     .data(D3State.nodesArray)\n//     .join('text')\n//     .text(function(d) {\n//       return d.id;\n//     });\n\n//   let link = svg\n//     .append('g')\n//     .attr('stroke', '#999')\n//     .attr('stroke-opacity', 0.6)\n//     .selectAll('line')\n//     .data(D3State.edgesArray)\n//     .join('line')\n//     .attr('stroke-width', d => Math.sqrt(d.value));\n\n//   simulation.on('tick', () => {\n//     if (onLabels) {\n//       text.attr('x', d => d.x + 10).attr('dy', d => d.y);\n//     }\n//     node.attr('cx', d => d.x).attr('cy', d => d.y);\n\n//     link\n//       .attr('x1', d => d.source.x)\n//       .attr('y1', d => d.source.y)\n//       .attr('x2', d => d.target.x)\n//       .attr('y2', d => d.target.y);\n//   });\n\n//     // Update and restart the simulation.\n//     simulation.nodes(D3State.nodesArray);\n//     simulation.force('link').links(D3State.edgesArray);\n//     simulation.alpha(1).restart();\n//   };\n\n//   D3.interval(\n//     () => {\n//       if (updaterIsCalled) {\n//         updaterIsCalled = false;\n//         D3State = { ...newState };\n//         newState = null;\n//         restart();\n//       }\n//       if (resetState) {\n//         console.log('im called');\n//         resetState = false;\n//         D3State = {};\n//         return;\n//       }\n//     },\n//     1,\n//     D3.now()\n//   );\n// };\n\n// const updater = newGraph => {\n//   updaterIsCalled = true;\n//   newState = newGraph;\n// };\n\n// const stateResetter = () => {\n//   resetState = true;\n// };\n\nexport {\n  enterNode,\n  updateNode,\n  enterLink,\n  updateLink,\n  updateGraph,\n  enterText,\n  restartGraph,\n  simulationCreator\n};\n","import React, { Component, ReactSVGElement } from 'react';\nimport * as D3 from 'd3';\nimport * as svgMounter from '../../../D3Mounter/D3Mounter.js';\nimport { Node, Edge } from '../../../sharedTypes';\n\nclass SvgComponent extends Component<\n  {},\n  { intervalId: number; d3Timer?: D3.Timer }\n> {\n  myRef: React.RefObject<SVGSVGElement>;\n  constructor(props: {}) {\n    super(props);\n    this.state = { intervalId: -1 };\n    this.myRef = React.createRef<SVGSVGElement>();\n  }\n  componentDidMount = () => {\n    if (!this.myRef.current) return;\n    let nodesArray: Node[] = [\n      { id: 'a' },\n      { id: 'b' },\n      { id: 'c' },\n      { id: 'd' }\n    ];\n    let edgesArray: Edge[] = [\n      { source: 'a', value: 1, target: 'b' },\n      { source: 'a', value: 1, target: 'c' },\n      { source: 'b', value: 1, target: 'c' },\n      { source: 'd', value: 1, target: 'b' }\n    ];\n\n    let copyNodes: Node[] = nodesArray.map(element => {\n      return JSON.parse(JSON.stringify(element));\n    });\n\n    let copyEdges: Edge[] = edgesArray.map(element => {\n      return JSON.parse(JSON.stringify(element));\n    });\n\n    let d3Graph = D3.select(this.myRef.current);\n    let width = this.myRef.current.width.baseVal.value;\n    let height = this.myRef.current.height.baseVal.value;\n\n    const simulation = svgMounter.simulationCreator(\n      copyNodes,\n      copyEdges,\n      height,\n      width\n    );\n\n    const drag = (simulation: any) => {\n      const dragstarted = (d: any) => {\n        if (!D3.event.active) simulation.alphaTarget(0.3).restart();\n        d.fx = d.x;\n        d.fy = d.y;\n      };\n\n      const dragged = (d: any) => {\n        d.fx = D3.event.x;\n        d.fy = D3.event.y;\n      };\n\n      const dragended = (d: any) => {\n        if (!D3.event.active) simulation.alphaTarget(0);\n        d.fx = null;\n        d.fy = null;\n      };\n\n      return D3.drag()\n        .on('start', dragstarted)\n        .on('drag', dragged)\n        .on('end', dragended);\n    };\n\n    let node = svgMounter.enterNode(\n      d3Graph,\n      copyNodes,\n      '#5B8BDA',\n      drag(simulation)\n    );\n\n    let link = svgMounter.enterLink(d3Graph, copyEdges);\n\n    simulation.on('tick', () => {\n      node.attr('cx', (d: any) => d.x).attr('cy', (d: any) => d.y);\n\n      link\n        .attr('x1', (d: any) => d.source.x)\n        .attr('y1', (d: any) => d.source.y)\n        .attr('x2', (d: any) => d.target.x)\n        .attr('y2', (d: any) => d.target.y);\n    });\n\n    const intervalId = window.setInterval(() => {\n      if (nodesArray.length < 8) {\n        let randomGenerated = Math.random().toString();\n        let randomTarget = Math.floor(Math.random() * nodesArray.length) - 1;\n        if (randomTarget === -1) {\n          randomTarget = 0;\n        }\n        let otherRandom = Math.floor(Math.random() * nodesArray.length) - 1;\n        if (otherRandom === -1) {\n          otherRandom = 0;\n        }\n        nodesArray = [...nodesArray, { id: randomGenerated }];\n        edgesArray = [\n          ...edgesArray,\n          {\n            source: randomGenerated,\n            value: 1,\n            target: nodesArray[randomTarget].id\n          }\n        ];\n\n        copyNodes = nodesArray.map(element => {\n          return JSON.parse(JSON.stringify(element));\n        });\n\n        copyEdges = edgesArray.map(element => {\n          return JSON.parse(JSON.stringify(element));\n        });\n\n        let newGraph = svgMounter.restartGraph(\n          node,\n          copyNodes,\n          '#5B8BDA',\n          drag(simulation),\n          link,\n          copyEdges,\n          null,\n          simulation\n        );\n        node = newGraph.nodeSelection;\n        link = newGraph.linkSelection;\n      }\n    }, 2000);\n\n    this.setState({ intervalId });\n  };\n\n  render() {\n    return <svg ref={this.myRef} width=\"100vw\" height=\"100vh\" />;\n  }\n\n  componentWillUnmount() {\n    if (this.state.intervalId) {\n      window.clearInterval(this.state.intervalId);\n    }\n    if (this.state.d3Timer) {\n      this.state.d3Timer.stop();\n    }\n  }\n}\n\nexport default SvgComponent;\n","import React, { Component } from 'react';\nimport SvgBackground from './FrontPageBackground/frontPageBackground';\nimport './Home.scss';\nimport { Link } from 'react-router-dom';\n\nclass Home extends Component {\n  render() {\n    return (\n      <div>\n        <div className=\"landing\">\n          <h1>\n            Graphalizer<span className=\"loader__dot\">.</span>\n            <span className=\"loader__dot\">.</span>\n            <span className=\"loader__dot\">.</span>\n          </h1>\n          <h2>Data visualization learning tool</h2>\n          <Link to=\"/grapher\">\n            <button>Get Started</button>\n          </Link>\n        </div>\n        <SvgBackground />\n      </div>\n    );\n  }\n}\n\nexport default Home;\n","import * as D3 from 'd3';\n\nexport interface Node extends D3.SimulationNodeDatum {\n  id: string | D3Source;\n}\nexport interface Edge extends D3.SimulationLinkDatum<Node> {\n  source: string | D3Source;\n  value: number;\n  target: string | D3Target;\n}\nexport interface Graph {\n  nodesArray: Node[];\n  edgesArray: Edge[];\n}\n\nexport const isD3Source = (maybeD3Source: any): maybeD3Source is D3Source =>\n  typeof maybeD3Source === 'object' && maybeD3Source.hasOwnProperty('id');\n\nexport const isD3Target = (maybeD3Source: any): maybeD3Source is D3Source =>\n  typeof maybeD3Source === 'object' && maybeD3Source.hasOwnProperty('id');\n\nexport interface D3Source {\n  id: string;\n}\nexport interface D3Target {\n  id: string;\n}\n","import React, { Component, ChangeEvent } from 'react';\nimport { connect } from 'react-redux';\nimport * as Actions from './GrapherAction';\nimport * as svgMounter from '../../D3Mounter/D3Mounter.js';\nimport { Graph, isD3Source, isD3Target, Edge } from '../../sharedTypes';\nimport * as D3 from 'd3';\n\ninterface GrapherState {\n  node_id: string;\n  node_id_message: string;\n  edge_source: string;\n  edge_source_message: string;\n  edge_weight: number;\n  edge_weight_message: string;\n  edge_target: string;\n  edge_target_message: string;\n  node_form_visibility: boolean;\n  node_list_visibility: boolean;\n  edge_form_visibility: boolean;\n  edge_list_visibility: boolean;\n  d3node: any;\n  d3link: any;\n  d3text: any;\n  d3Graph: any;\n  simulation: any;\n  drag: any;\n}\n\ninterface GrapherStateProps {\n  graph: Graph;\n}\ninterface GrapherDispatchProps {\n  addNode: (postdata: { id: string }) => void;\n  addEdge: (postdata: {\n    source: string;\n    value: number;\n    target: string;\n  }) => void;\n}\ntype GrapherProps = GrapherStateProps & GrapherDispatchProps;\n\nclass Grapher extends Component<GrapherProps, GrapherState> {\n  myRef: React.RefObject<SVGSVGElement>;\n  constructor(props: GrapherProps) {\n    super(props);\n    this.state = {\n      node_id: '',\n      node_id_message: '',\n      edge_source: '',\n      edge_source_message: '',\n      edge_weight: 0,\n      edge_weight_message: '',\n      edge_target: '',\n      edge_target_message: '',\n      node_form_visibility: false,\n      node_list_visibility: false,\n      edge_form_visibility: false,\n      edge_list_visibility: false,\n      d3node: null,\n      d3link: null,\n      d3text: null,\n      d3Graph: null,\n      simulation: null,\n      drag: null\n    };\n    this.myRef = React.createRef<SVGSVGElement>();\n  }\n\n  componentDidMount = () => {\n    if (this.myRef.current === null) return;\n    let copyNodes: Node[] = this.props.graph.nodesArray.map(element => {\n      return JSON.parse(JSON.stringify(element));\n    });\n\n    let copyEdges: Edge[] = this.props.graph.edgesArray.map(element => {\n      return JSON.parse(JSON.stringify(element));\n    });\n\n    let d3Graph = D3.select(this.myRef.current);\n    let width = this.myRef.current.width.baseVal.value;\n    let height = this.myRef.current.height.baseVal.value;\n\n    const simulation = svgMounter.simulationCreator(\n      copyNodes,\n      copyEdges,\n      height,\n      width\n    );\n\n    const drag = (simulation: any) => {\n      const dragstarted = (d: any) => {\n        if (!D3.event.active) simulation.alphaTarget(0.3).restart();\n        d.fx = d.x;\n        d.fy = d.y;\n      };\n\n      const dragged = (d: any) => {\n        d.fx = D3.event.x;\n        d.fy = D3.event.y;\n      };\n\n      const dragended = (d: any) => {\n        if (!D3.event.active) simulation.alphaTarget(0);\n        d.fx = null;\n        d.fy = null;\n      };\n\n      return D3.drag()\n        .on('start', dragstarted)\n        .on('drag', dragged)\n        .on('end', dragended);\n    };\n\n    let d3node = svgMounter.enterNode(\n      d3Graph,\n      copyNodes,\n      '#5B8BDA',\n      drag(simulation)\n    );\n\n    let d3link = svgMounter.enterLink(d3Graph, copyEdges);\n    let d3text = svgMounter.enterText(d3Graph, copyNodes);\n    this.setState({ d3node, d3text, d3link, d3Graph, drag, simulation });\n\n    simulation.on('tick', () => {\n      d3node.attr('cx', (d: any) => d.x).attr('cy', (d: any) => d.y);\n      d3text.attr('x', (d: any) => d.x + 10).attr('dy', (d: any) => d.y);\n\n      d3link\n        .attr('x1', (d: any) => d.source.x)\n        .attr('y1', (d: any) => d.source.y)\n        .attr('x2', (d: any) => d.target.x)\n        .attr('y2', (d: any) => d.target.y);\n    });\n  };\n\n  handleChange = (\n    event: ChangeEvent<HTMLInputElement> | ChangeEvent<HTMLSelectElement>\n  ) => {\n    if (event.target !== null) {\n      const { name, value } = event.target;\n      this.setState({\n        [name]: value\n      } as any);\n    }\n  };\n\n  nodeListVis = (event: React.MouseEvent<HTMLButtonElement, MouseEvent>) => {\n    event.preventDefault();\n    if (!this.state.node_list_visibility) {\n      this.setState({ node_list_visibility: true });\n    } else {\n      this.setState({ node_list_visibility: false });\n    }\n  };\n\n  nodeFormVis = (event: React.MouseEvent<HTMLButtonElement, MouseEvent>) => {\n    event.preventDefault();\n    this.setState({ node_form_visibility: true });\n  };\n\n  edgeListVis = (event: React.MouseEvent<HTMLButtonElement, MouseEvent>) => {\n    event.preventDefault();\n    if (!this.state.edge_list_visibility) {\n      this.setState({ edge_list_visibility: true });\n    } else {\n      this.setState({ edge_list_visibility: false });\n    }\n  };\n\n  edgeFormVis = (event: React.MouseEvent<HTMLButtonElement, MouseEvent>) => {\n    event.preventDefault();\n    this.setState({ edge_form_visibility: true });\n  };\n\n  handleNodeSubmit = (\n    event: React.MouseEvent<HTMLButtonElement, MouseEvent>\n  ) => {\n    event.preventDefault();\n    const reducerData = this.props.graph.nodesArray;\n    let uniqueId = new Set();\n    reducerData.forEach(element => {\n      uniqueId.add(element.id);\n    });\n\n    event.preventDefault();\n    this.setState({\n      node_id_message: ''\n    });\n    if (this.state.node_id.length <= 0) {\n      this.setState({\n        node_id_message: 'Empty field, please enter information'\n      });\n    } else if (uniqueId.has(this.state.node_id)) {\n      this.setState({\n        node_id_message: 'ID already taken, please set a new ID'\n      });\n    } else if (\n      this.state.node_id.length > 0 &&\n      !uniqueId.has(this.state.node_id)\n    ) {\n      let postData = { id: this.state.node_id };\n      this.props.addNode(postData);\n\n      this.setState({ node_form_visibility: false }, () => {\n        let copyNodes: Node[] = this.props.graph.nodesArray.map(element => {\n          return JSON.parse(JSON.stringify(element));\n        });\n\n        let copyEdges: Edge[] = this.props.graph.edgesArray.map(element => {\n          return JSON.parse(JSON.stringify(element));\n        });\n        let d3Graph = D3.select(this.myRef.current);\n        let d3node = d3Graph.selectAll('.node');\n        let d3text = d3Graph.selectAll('.desc');\n\n        let d3link = d3Graph.selectAll('.link');\n        let newGraphSelection = svgMounter.restartGraph(\n          this.state.d3node,\n          copyNodes,\n          '#5B8BDA',\n          this.state.drag(this.state.simulation),\n          this.state.d3link,\n          copyEdges,\n          this.state.d3text,\n          this.state.simulation\n        );\n        d3node = newGraphSelection.nodeSelection;\n        d3text = newGraphSelection.textSelection;\n        d3link = newGraphSelection.linkSelection;\n\n        this.state.simulation.on('tick', () => {\n          d3node.attr('cx', (d: any) => d.x).attr('cy', (d: any) => d.y);\n          d3text.attr('x', (d: any) => d.x + 10).attr('dy', (d: any) => d.y);\n\n          d3link\n            .attr('x1', (d: any) => d.source.x)\n            .attr('y1', (d: any) => d.source.y)\n            .attr('x2', (d: any) => d.target.x)\n            .attr('y2', (d: any) => d.target.y);\n        });\n        this.setState({ d3link, d3node, d3text });\n      });\n    }\n  };\n\n  handleEdgeSubmit = (\n    event: React.MouseEvent<HTMLButtonElement, MouseEvent>\n  ) => {\n    event.preventDefault();\n    console.log('clicked');\n    this.setState({\n      edge_source_message: '',\n      edge_target_message: '',\n      edge_weight_message: ''\n    });\n    if (this.state.edge_source.length <= 0) {\n      this.setState({\n        edge_source_message:\n          'Please select a source node or create a node first'\n      });\n    }\n    if (this.state.edge_weight <= 0) {\n      this.setState({\n        edge_weight_message: 'Please enter a weight for the edge'\n      });\n    }\n    if (this.state.edge_target.length <= 0) {\n      this.setState({\n        edge_target_message:\n          'Please select a target node or create a node first'\n      });\n    }\n    if (\n      this.state.edge_source.length > 0 &&\n      this.state.edge_weight > 0 &&\n      this.state.edge_target.length > 0\n    ) {\n      let postData = {\n        source: this.state.edge_source,\n        value: this.state.edge_weight,\n        target: this.state.edge_target\n      };\n\n      this.props.addEdge(postData);\n\n      this.setState({ edge_form_visibility: false }, () => {\n        let copyNodes: Node[] = this.props.graph.nodesArray.map(element => {\n          return JSON.parse(JSON.stringify(element));\n        });\n\n        let copyEdges: Edge[] = this.props.graph.edgesArray.map(element => {\n          return JSON.parse(JSON.stringify(element));\n        });\n        let d3Graph = D3.select(this.myRef.current);\n\n        let d3node = d3Graph.selectAll('.node');\n        let d3text = d3Graph.selectAll('.desc');\n\n        let d3link = d3Graph.selectAll('.link');\n        let newGraphSelection = svgMounter.restartGraph(\n          this.state.d3node,\n          copyNodes,\n          '#5B8BDA',\n          this.state.drag(this.state.simulation),\n          this.state.d3link,\n          copyEdges,\n          this.state.d3text,\n          this.state.simulation\n        );\n        d3node = newGraphSelection.nodeSelection;\n        d3text = newGraphSelection.textSelection;\n        d3link = newGraphSelection.linkSelection;\n        console.log(d3link);\n        this.state.simulation.on('tick', () => {\n          d3node.attr('cx', (d: any) => d.x).attr('cy', (d: any) => d.y);\n          d3text.attr('x', (d: any) => d.x + 10).attr('dy', (d: any) => d.y);\n\n          d3link\n            .attr('x1', (d: any) => d.source.x)\n            .attr('y1', (d: any) => d.source.y)\n            .attr('x2', (d: any) => d.target.x)\n            .attr('y2', (d: any) => d.target.y);\n        });\n\n        this.setState({ d3link, d3node, d3text });\n      });\n    }\n  };\n\n  render() {\n    return (\n      <div>\n        <div className=\"nodeArea\">\n          <h1>Nodes</h1>\n          <button onClick={event => this.nodeListVis(event)}>\n            {this.state.node_list_visibility ? 'Hide' : 'Expand'}\n          </button>\n\n          {this.state.node_list_visibility ? (\n            <ul>\n              {this.props.graph.nodesArray.map((element, index) => {\n                return <li key={index}>Node: {element.id}</li>;\n              })}\n            </ul>\n          ) : null}\n\n          <button onClick={this.nodeFormVis}>+</button>\n          {this.state.node_form_visibility ? (\n            <form>\n              <label htmlFor=\"node_id\">Node</label>\n              <input type=\"text\" name=\"node_id\" onChange={this.handleChange} />\n\n              <p>{this.state.node_id_message}</p>\n              <button type=\"submit\" onClick={this.handleNodeSubmit}>\n                Create Node\n              </button>\n            </form>\n          ) : null}\n        </div>\n        <div className=\"edgeArea\">\n          <h1>Edges</h1>\n          <button onClick={this.edgeListVis}>\n            {this.state.edge_list_visibility ? 'Hide' : 'Expand'}\n          </button>\n          {this.state.edge_list_visibility ? (\n            <div className=\"edgeList\">\n              {this.props.graph.edgesArray.map((element, index) => {\n                return (\n                  <div key={index}>\n                    {isD3Source(element.source) &&\n                    isD3Target(element.target) ? (\n                      <>\n                        <h2>Source Node: {element.source.id}</h2>\n                        <h2>Weight:{element.value}</h2>\n                        <h2>Target Node: {element.target.id}</h2>\n                      </>\n                    ) : null}\n                  </div>\n                );\n              })}\n              }\n            </div>\n          ) : null}\n\n          <button onClick={this.edgeFormVis}>+</button>\n          {this.state.edge_form_visibility ? (\n            <form>\n              <label htmlFor=\"edge_source\">Source Node</label>\n              <select name=\"edge_source\" onChange={this.handleChange}>\n                <option value=\"\">Node Source</option>\n                {this.props.graph.nodesArray.map((element, index) => {\n                  return isD3Target(element) ? (\n                    <option value={element.id} key={index}>\n                      {element.id}\n                    </option>\n                  ) : null;\n                })}\n              </select>\n              <p>{this.state.edge_source_message}</p>\n\n              <label htmlFor=\"edge_weight\">Edge Weight</label>\n              <input\n                type=\"number\"\n                name=\"edge_weight\"\n                min=\"0\"\n                onChange={this.handleChange}\n              />\n              <p>{this.state.edge_weight_message}</p>\n              <label htmlFor=\"edge_target\">Target Node</label>\n              <select name=\"edge_target\" onChange={this.handleChange}>\n                <option value=\"\">Node Target</option>\n                {this.props.graph.nodesArray.map((element, index) => {\n                  return isD3Target(element) ? (\n                    <option value={element.id} key={index}>\n                      {element.id}\n                    </option>\n                  ) : null;\n                })}\n              </select>\n              <p>{this.state.edge_target_message}</p>\n              <button type=\"submit\" onClick={this.handleEdgeSubmit}>\n                Create Edge\n              </button>\n            </form>\n          ) : null}\n        </div>\n\n        <svg ref={this.myRef} width=\"60vw\" height=\"100vh\" />\n      </div>\n    );\n  }\n}\n\nconst mapStateToProps = (reducerState: Graph): GrapherStateProps => ({\n  graph: reducerState\n});\n\nconst mapDispatchToProps = (dispatch: any): GrapherDispatchProps => ({\n  addNode: newNode => dispatch(Actions.nodeAdder(newNode)),\n  addEdge: newEdge => dispatch(Actions.edgeAdder(newEdge))\n});\n\nexport default connect(\n  mapStateToProps,\n  mapDispatchToProps\n)(Grapher);\n","const nodeAdder = (payload: any) => {\n  return {\n    type: 'GRAPHADDNODE',\n    payload: payload\n  };\n};\n\nconst edgeAdder = (payload: any) => {\n  console.log(payload);\n  return {\n    type: 'GRAPHADDEDGE',\n    payload: payload\n  };\n};\nexport { nodeAdder, edgeAdder };\n","import React, { Component } from 'react';\nimport { HashRouter, Route } from 'react-router-dom';\nimport Home from './components/Home/Home';\nimport Grapher from './components/Grapher/Grapher';\nimport './reset.scss';\n\nclass App extends Component {\n  componentDidMount() {\n    document.title = 'Graphalizer';\n  }\n\n  render() {\n    return (\n      <HashRouter>\n        <Route path=\"/\" exact component={Home} />\n        <Route path=\"/grapher\" exact component={Grapher} />\n      </HashRouter>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import { Graph, Edge, Node } from '../../sharedTypes';\n\nlet initialState: Graph = {\n  nodesArray: [],\n  edgesArray: []\n};\n\ntype Action =\n  | {\n      type: ActionTypes.GraphAddEdge;\n      payload: Edge;\n    }\n  | { type: ActionTypes.GraphAddNode; payload: Node };\nenum ActionTypes {\n  GraphAddNode = 'GRAPHADDNODE',\n  GraphAddEdge = 'GRAPHADDEDGE'\n}\nexport default (state = initialState, action: Action): Graph => {\n  switch (action.type) {\n    case ActionTypes.GraphAddNode:\n      return {\n        ...state,\n        nodesArray: [...state.nodesArray, action.payload]\n      };\n\n    case ActionTypes.GraphAddEdge:\n      return {\n        ...state,\n        edgesArray: [...state.edgesArray, action.payload]\n      };\n\n    default:\n      return state;\n  }\n};\n","export default (store: any) => (next: any) => (action: any) => {\n  console.log('__ACTION__', action);\n  try {\n    let result = next(action);\n    console.log('__STATE__', store.getState());\n    return result;\n  } catch (err) {\n    err.action = action;\n    console.error(err);\n    return err;\n  }\n};\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport { Provider } from 'react-redux';\nimport * as serviceWorker from './serviceWorker';\nimport createStore from './store/index';\n\nconst store = createStore();\n\nfunction Main() {\n  return (\n    <Provider store={store}>\n      <React.Fragment>\n        <App />\n      </React.Fragment>\n    </Provider>\n  );\n}\n\nReactDOM.render(<Main />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","import { createStore, combineReducers, applyMiddleware } from 'redux';\nimport reporter from './middleware/reporter';\n\nimport graphReducer from './reducer/graphReducer';\n\nexport default () => createStore(graphReducer, applyMiddleware(reporter));\n"],"sourceRoot":""}