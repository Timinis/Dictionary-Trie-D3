{"version":3,"sources":["components/Home/FrontPageBackground/frontPageD3.js","components/Home/FrontPageBackground/frontPageBackground.tsx","components/Home/Home.tsx","App.js","serviceWorker.js","index.js"],"names":["frontPageD3","svgComponent","nodesArray","edgesArray","onLabels","svg","D3","width","window","outerWidth","height","outerHeight","simulation","force","id","d","drag","on","active","alphaTarget","restart","fx","x","fy","y","randomColor","Math","floor","random","toString","node","append","attr","selectAll","data","join","style","call","text","link","sqrt","value","source","target","length","randomGenerated","randomTarget","otherRandom","push","group","exit","remove","enter","merge","nodes","links","alpha","SvgComponent","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","componentDidMount","document","getElementById","svgMounter","react_default","a","createElement","Component","Home","frontPageBackground","App","state","title","react_router_dom","react_router","path","exact","component","Boolean","location","hostname","match","ReactDOM","render","src_App","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.8ed6c1b9.chunk.js","sourcesContent":["import * as D3 from 'd3';\n\nexport default (svgComponent, nodesArray, edgesArray, onLabels) => {\n  let svg = D3.select(svgComponent),\n    width = window.outerWidth,\n    height = window.outerHeight;\n\n  const simulation = D3.forceSimulation(nodesArray)\n    .force('link', D3.forceLink(edgesArray).id(d => d.id))\n    .force('charge', D3.forceManyBody())\n    .force('center', D3.forceCenter(width / 2, height / 2));\n\n  const drag = simulation => {\n    const dragstarted = d => {\n      if (!D3.event.active) simulation.alphaTarget(0.3).restart();\n      d.fx = d.x;\n      d.fy = d.y;\n    };\n\n    const dragged = d => {\n      d.fx = D3.event.x;\n      d.fy = D3.event.y;\n    };\n\n    const dragended = d => {\n      if (!D3.event.active) simulation.alphaTarget(0);\n      d.fx = null;\n      d.fy = null;\n    };\n\n    return D3.drag()\n      .on('start', dragstarted)\n      .on('drag', dragged)\n      .on('end', dragended);\n  };\n\n  let randomColor = '#' + Math.floor(Math.random() * 16777215).toString(16);\n\n  let node = svg\n    .append('g')\n    .attr('stroke', '#fff')\n    .attr('stroke-width', 1.5)\n    .selectAll('circle')\n    .data(nodesArray)\n    .join('circle')\n    .attr('r', 6)\n    .style('fill', randomColor)\n    .call(drag(simulation));\n\n  let text = svg\n    .append('g')\n    .attr('stroke', '#999')\n    .selectAll('text')\n    .data(nodesArray)\n    .join('text')\n    .text(function(d) {\n      return d.id;\n    });\n\n  let link = svg\n    .append('g')\n    .attr('stroke', '#999')\n    .attr('stroke-opacity', 0.6)\n    .selectAll('line')\n    .data(edgesArray)\n    .join('line')\n    .attr('stroke-width', d => Math.sqrt(d.value));\n\n  simulation.on('tick', () => {\n    if (onLabels) {\n      text.attr('x', d => d.x + 10).attr('dy', d => d.y);\n    }\n    node.attr('cx', d => d.x).attr('cy', d => d.y);\n\n    link\n      .attr('x1', d => d.source.x)\n      .attr('y1', d => d.source.y)\n      .attr('x2', d => d.target.x)\n      .attr('y2', d => d.target.y);\n  });\n\n  const restart = () => {\n    // Apply the general update pattern to the nodes.\n    node = node.data(nodesArray, d => {\n      return d.id;\n    });\n    node.exit().remove();\n    node = node\n      .enter()\n      .append('circle')\n      .attr('r', 6)\n      .style('fill', randomColor)\n      .merge(node)\n      .call(drag(simulation));\n\n    // Apply the general update pattern to the links.\n    link = link.data(edgesArray, d => {\n      return d.source.id + '-' + d.target.id;\n    });\n    link.exit().remove();\n    link = link\n      .enter()\n      .append('line')\n      .merge(link);\n    if (onLabels) {\n      text = text.data(nodesArray, d => {\n        return d.id;\n      });\n      text.exit().remove();\n      text = text\n        .enter()\n        .append('text')\n        .text(function(d) {\n          return d.id;\n        })\n        .merge(text)\n        .call(drag(simulation));\n    }\n\n    // Update and restart the simulation.\n    simulation.nodes(nodesArray);\n    simulation.force('link').links(edgesArray);\n    simulation.alpha(1).restart();\n  };\n\n  D3.interval(\n    () => {\n      if (nodesArray.length < 30) {\n        let randomGenerated = Math.random().toString();\n        let randomTarget = Math.floor(Math.random() * nodesArray.length) - 1;\n        if (randomTarget === -1) {\n          randomTarget = 0;\n        }\n        let otherRandom = Math.floor(Math.random() * nodesArray.length) - 1;\n        if (otherRandom === -1) {\n          otherRandom = 0;\n        }\n\n        nodesArray.push({ id: randomGenerated, group: '1' });\n        edgesArray.push({\n          source: randomGenerated,\n          value: '1',\n          target: nodesArray[randomTarget].id\n        });\n        edgesArray.push({\n          source: nodesArray[otherRandom].id,\n          value: '1',\n          target: nodesArray[randomTarget].id\n        });\n\n        restart();\n      }\n    },\n    2000,\n    D3.now()\n  );\n};\n","import React, { Component } from 'react';\nimport svgMounter from './frontPageD3.js';\n\nclass SvgComponent extends Component {\n  constructor(props: any) {\n    super(props);\n  }\n  componentDidMount = () => {\n    const nodesArray = [{ id: 'a' }, { id: 'b' }, { id: 'c' }, { id: 'd' }];\n    const edgesArray = [\n      { source: 'a', value: 1, target: 'b' },\n      { source: 'a', value: 1, target: 'c' },\n      { source: 'd', value: 1, target: 'b' }\n    ];\n    const svg = document.getElementById('directed-background');\n    svgMounter(svg, nodesArray, edgesArray, false);\n  };\n\n  render() {\n    return <svg id=\"directed-background\" width=\"100vw\" height=\"100vh\" />;\n  }\n}\n\nexport default SvgComponent;\n","import React, { Component } from 'react';\nimport SvgBackground from './FrontPageBackground/frontPageBackground';\n\nclass Home extends Component {\n  render() {\n    return (\n      <div>\n        <h1>Graphalizer</h1>\n        <SvgBackground />\n      </div>\n    );\n  }\n}\n\nexport default Home;\n","import React, { Component } from 'react';\nimport { HashRouter, Route } from 'react-router-dom';\nimport Home from './components/Home/Home';\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      // What kind of inital state to we need?\n    };\n  }\n\n  componentDidMount() {\n    document.title = 'Timothy Li- Interactive Media';\n  }\n\n  render() {\n    return (\n      <HashRouter>\n        <div>\n          <Route path=\"/\" exact component={Home} />\n        </div>\n      </HashRouter>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}