{"version":3,"sources":["D3Mounter/D3Mounter.js","components/Home/FrontPageBackground/frontPageBackground.tsx","components/Home/Home.tsx","components/Grapher/Grapher.js","components/Grapher/GrapherAction.tsx","App.js","serviceWorker.js","store/middleware/reporter.ts","store/reducer/dictionaryReducer.ts","store/reducer/graphReducer.ts","store/index.ts","index.js"],"names":["state","needUpdate","initializer","svgComponent","nodesArray","edgesArray","onLabels","Object","objectSpread","nodes","edges","svg","D3","width","baseVal","value","height","simulation","force","distance","id","d","drag","on","active","alphaTarget","restart","fx","x","fy","y","node","append","attr","selectAll","data","join","style","call","text","link","Math","sqrt","source","target","exit","remove","enter","merge","links","alpha","updater","SvgComponent","componentDidMount","document","getElementById","svgMounter","setInterval","length","randomGenerated","random","toString","randomTarget","floor","otherRandom","concat","toConsumableArray","react_default","a","createElement","Component","Home","className","react_router_dom","to","frontPageBackground","Grapher","props","_this","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","graph","handleChange","event","_event$target","name","setState","defineProperty","nodeListVis","preventDefault","node_list_visibility","nodeFormVis","node_form_visibility","edgeListVis","edge_list_visibility","edgeFormVis","edge_form_visibility","handleNodeSubmit","reducerData","uniqueId","Set","forEach","element","add","node_id_message","node_id","has","postData","addNode","setTimeout","handleEdgeSubmit","console","log","edge_source_message","edge_target_message","edge_weight_message","edge_source","edge_weight","edge_target","addEdge","onClick","map","index","key","type","onChange","min","connect","dispatch","getState","newNode","payload","newEdge","App","title","react_router","path","exact","component","Boolean","window","location","hostname","match","reporter","store","next","action","result","err","error","initialState","reducers","combineReducers","dictionary","arguments","undefined","createStore","applyMiddleware","ReactDOM","render","es","Fragment","src_App","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.b0ac9b8c.chunk.js","sourcesContent":["import * as D3 from 'd3';\n\nlet state = { needUpdate: false };\n\nconst initializer = (svgComponent, nodesArray, edgesArray, onLabels) => {\n  state = { ...state, nodes: nodesArray, edges: edgesArray };\n  let svg = D3.select(svgComponent),\n    width = svgComponent.width.baseVal.value,\n    height = svgComponent.height.baseVal.value;\n\n  const simulation = D3.forceSimulation(state.nodes)\n    .force(\n      'link',\n      D3.forceLink(state.edges)\n        .distance(width / 20)\n        .id(d => d.id)\n    )\n    .force('charge', D3.forceManyBody())\n    .force('center', D3.forceCenter(width * 0.6, height / 2));\n\n  const drag = simulation => {\n    const dragstarted = d => {\n      if (!D3.event.active) simulation.alphaTarget(0.3).restart();\n      d.fx = d.x;\n      d.fy = d.y;\n    };\n\n    const dragged = d => {\n      d.fx = D3.event.x;\n      d.fy = D3.event.y;\n    };\n\n    const dragended = d => {\n      if (!D3.event.active) simulation.alphaTarget(0);\n      d.fx = null;\n      d.fy = null;\n    };\n\n    return D3.drag()\n      .on('start', dragstarted)\n      .on('drag', dragged)\n      .on('end', dragended);\n  };\n\n  let themeColor = '#5B8BDA';\n\n  let node = svg\n    .append('g')\n    .attr('stroke', '#fff')\n    .attr('stroke-width', 1.5)\n    .selectAll('circle')\n    .data(state.nodes)\n    .join('circle')\n    .attr('r', 10)\n    .style('fill', themeColor)\n    .call(drag(simulation));\n\n  let text = svg\n    .append('g')\n    .attr('stroke', '#999')\n    .selectAll('text')\n    .data(state.nodes)\n    .join('text')\n    .text(function(d) {\n      return d.id;\n    });\n\n  let link = svg\n    .append('g')\n    .attr('stroke', '#999')\n    .attr('stroke-opacity', 0.6)\n    .selectAll('line')\n    .data(state.edges)\n    .join('line')\n    .attr('stroke-width', d => Math.sqrt(d.value));\n\n  simulation.on('tick', () => {\n    if (onLabels) {\n      text.attr('x', d => d.x + 10).attr('dy', d => d.y);\n    }\n    node.attr('cx', d => d.x).attr('cy', d => d.y);\n\n    link\n      .attr('x1', d => d.source.x)\n      .attr('y1', d => d.source.y)\n      .attr('x2', d => d.target.x)\n      .attr('y2', d => d.target.y);\n  });\n\n  const restart = () => {\n    // Apply the general update pattern to the nodes.\n    node = node.data(state.nodes, d => {\n      return d.id;\n    });\n    node.exit().remove();\n    node = node\n      .enter()\n      .append('circle')\n      .attr('r', 10)\n      .style('fill', themeColor)\n      .merge(node)\n      .call(drag(simulation));\n\n    // Apply the general update pattern to the links.\n    link = link.data(state.edges, d => {\n      return d.source.id + '-' + d.target.id;\n    });\n    link.exit().remove();\n    link = link\n      .enter()\n      .append('line')\n      .merge(link);\n    if (onLabels) {\n      text = text.data(state.nodes, d => {\n        return d.id;\n      });\n      text.exit().remove();\n      text = text\n        .enter()\n        .append('text')\n        .text(function(d) {\n          return d.id;\n        })\n        .merge(text)\n        .call(drag(simulation));\n    }\n\n    // Update and restart the simulation.\n    simulation.nodes(state.nodes);\n    simulation.force('link').links(state.edges);\n    simulation.alpha(1).restart();\n  };\n\n  D3.interval(\n    () => {\n      if (state.needUpdate) {\n        state = { ...state, needUpdate: false };\n        restart();\n      }\n    },\n    1,\n    D3.now()\n  );\n};\n\nconst updater = (nodesArray, edgesArray) => {\n  state = { ...state, nodes: nodesArray, edges: edgesArray, needUpdate: true };\n};\n\nexport { initializer, updater };\n","import React, { Component } from 'react';\nimport * as svgMounter from '../../../D3Mounter/D3Mounter';\n\nclass SvgComponent extends Component {\n  componentDidMount = () => {\n    let nodesArray = [{ id: 'a' }, { id: 'b' }, { id: 'c' }, { id: 'd' }];\n    let edgesArray = [\n      { source: 'a', value: 1, target: 'b' },\n      { source: 'a', value: 1, target: 'c' },\n      { source: 'b', value: 1, target: 'c' },\n      { source: 'd', value: 1, target: 'b' }\n    ];\n    const svg = document.getElementById('directed-background');\n    svgMounter.initializer(svg, nodesArray, edgesArray, false);\n\n    setInterval(() => {\n      if (nodesArray.length < 15) {\n        let randomGenerated = Math.random().toString();\n        let randomTarget = Math.floor(Math.random() * nodesArray.length) - 1;\n        if (randomTarget === -1) {\n          randomTarget = 0;\n        }\n        let otherRandom = Math.floor(Math.random() * nodesArray.length) - 1;\n        if (otherRandom === -1) {\n          otherRandom = 0;\n        }\n        nodesArray = [...nodesArray, { id: randomGenerated }];\n        edgesArray = [\n          ...edgesArray,\n          {\n            source: randomGenerated,\n            value: 1,\n            target: nodesArray[randomTarget].id\n          }\n        ];\n        edgesArray = [\n          ...edgesArray,\n          {\n            source: nodesArray[otherRandom].id,\n            value: 1,\n            target: nodesArray[randomTarget].id\n          }\n        ];\n        svgMounter.updater(nodesArray, edgesArray);\n      }\n    }, 2000);\n  };\n\n  render() {\n    return <svg id=\"directed-background\" width=\"100vw\" height=\"100vh\" />;\n  }\n}\n\nexport default SvgComponent;\n","import React, { Component } from 'react';\nimport SvgBackground from './FrontPageBackground/frontPageBackground';\nimport './Home.scss';\nimport { Link } from 'react-router-dom';\n\nclass Home extends Component {\n  render() {\n    return (\n      <div>\n        <div className=\"landing\">\n          <h1>\n            Graphalizer<span className=\"loader__dot\">.</span>\n            <span className=\"loader__dot\">.</span>\n            <span className=\"loader__dot\">.</span>\n          </h1>\n          <h2>Data visualization learning tool</h2>\n          <Link to=\"/grapher\">\n            <button>Get Started</button>\n          </Link>\n        </div>\n        <SvgBackground />\n      </div>\n    );\n  }\n}\n\nexport default Home;\n","import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport * as Actions from './GrapherAction';\nimport * as svgMounter from '../../D3Mounter/D3Mounter';\n\nclass Grapher extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      node_id: '',\n      node_id_message: '',\n      edge_source: '',\n      edge_source_message: '',\n      edge_weight: 0,\n      edge_weight_message: '',\n      edge_target: '',\n      edge_target_message: '',\n      node_form_visibility: false,\n      node_list_visibility: false,\n      edge_form_visibility: false,\n      edge_list_visibility: false\n    };\n  }\n\n  componentDidMount = () => {\n    const svg = document.getElementById('grapher');\n    svgMounter.initializer(\n      svg,\n      this.props.graph.nodesArray,\n      this.props.graph.edgesArray,\n      true\n    );\n  };\n\n  handleChange = event => {\n    const { name, value } = event.target;\n    this.setState({\n      [name]: value\n    });\n  };\n\n  nodeListVis = event => {\n    event.preventDefault();\n    if (!this.state.node_list_visibility) {\n      this.setState({ node_list_visibility: true });\n    } else {\n      this.setState({ node_list_visibility: false });\n    }\n  };\n\n  nodeFormVis = event => {\n    event.preventDefault();\n    this.setState({ node_form_visibility: true });\n  };\n\n  edgeListVis = event => {\n    event.preventDefault();\n    if (!this.state.edge_list_visibility) {\n      this.setState({ edge_list_visibility: true });\n    } else {\n      this.setState({ edge_list_visibility: false });\n    }\n  };\n\n  edgeFormVis = event => {\n    event.preventDefault();\n    this.setState({ edge_form_visibility: true });\n  };\n\n  handleNodeSubmit = event => {\n    event.preventDefault();\n    const reducerData = this.props.graph.nodesArray;\n    let uniqueId = new Set();\n    reducerData.forEach(element => {\n      uniqueId.add(element.id);\n    });\n\n    event.preventDefault();\n    this.setState({\n      node_id_message: ''\n    });\n    if (this.state.node_id.length <= 0) {\n      this.setState({\n        node_id_message: 'Empty field, please enter information'\n      });\n    }\n    if (uniqueId.has(this.state.node_id)) {\n      this.setState({\n        node_id_message: 'ID already taken, please set a new ID'\n      });\n    }\n    if (this.state.node_id.length > 0 && !uniqueId.has(this.state.node_id)) {\n      let postData = { id: this.state.node_id };\n      this.props.addNode(postData);\n      setTimeout(() => {\n        svgMounter.updater(\n          this.props.graph.nodesArray,\n          this.props.graph.edgesArray\n        );\n      }, 2);\n      this.setState({ node_form_visibility: false });\n    }\n  };\n\n  handleEdgeSubmit = event => {\n    event.preventDefault();\n    console.log('clicked');\n    this.setState({\n      edge_source_message: '',\n      edge_target_message: '',\n      edge_weight_message: ''\n    });\n    if (this.state.edge_source.length <= 0) {\n      this.setState({\n        edge_source_message:\n          'Please select a source node or create a node first'\n      });\n    }\n    if (this.state.edge_weight.length <= 0) {\n      this.setState({\n        edge_weight_message: 'Please enter a weight for the edge'\n      });\n    }\n    if (this.state.edge_target.length <= 0) {\n      this.setState({\n        edge_target_message:\n          'Please select a target node or create a node first'\n      });\n    }\n    if (\n      this.state.edge_source.length > 0 &&\n      this.state.edge_weight > 0 &&\n      this.state.edge_target.length > 0\n    ) {\n      let postData = {\n        source: this.state.edge_source,\n        value: this.state.edge_weight,\n        target: this.state.edge_target\n      };\n      console.log(postData);\n      this.props.addEdge(postData);\n      setTimeout(() => {\n        svgMounter.updater(\n          this.props.graph.nodesArray,\n          this.props.graph.edgesArray\n        );\n      }, 2);\n      this.setState({ edge_form_visibility: false });\n    }\n  };\n\n  render() {\n    return (\n      <div>\n        <div className=\"nodeArea\">\n          <h1>Nodes</h1>\n          <button onClick={this.nodeListVis}>\n            {this.state.node_list_visibility ? 'Hide' : 'Expand'}\n          </button>\n\n          {this.state.node_list_visibility ? (\n            <ul>\n              {this.props.graph.nodesArray.map((element, index) => {\n                return <li key={index}>Node: {element.id}</li>;\n              })}\n            </ul>\n          ) : null}\n\n          <button onClick={this.nodeFormVis}>+</button>\n          {this.state.node_form_visibility ? (\n            <form>\n              <label type=\"node_id\">Node</label>\n              <input type=\"text\" name=\"node_id\" onChange={this.handleChange} />\n\n              <p>{this.state.node_id_message}</p>\n              <button type=\"submit\" onClick={this.handleNodeSubmit}>\n                Create Node\n              </button>\n            </form>\n          ) : null}\n        </div>\n        <div className=\"edgeArea\">\n          <h1>Edges</h1>\n          <button onClick={this.edgeListVis}>\n            {this.state.edge_list_visibility ? 'Hide' : 'Expand'}\n          </button>\n          {this.state.edge_list_visibility ? (\n            <div className=\"edgeList\">\n              {this.props.graph.edgesArray.map((element, index) => {\n                return (\n                  <div key={index}>\n                    <h2>Source Node: {element.source.id}</h2>\n                    <h2>Weight:{element.value}</h2>\n                    <h2>Target Node: {element.target.id}</h2>\n                  </div>\n                );\n              })}\n              }\n            </div>\n          ) : null}\n\n          <button onClick={this.edgeFormVis}>+</button>\n          {this.state.edge_form_visibility ? (\n            <form>\n              <label type=\"edge_source\">Source Node</label>\n              <select\n                type=\"select\"\n                name=\"edge_source\"\n                onChange={this.handleChange}\n              >\n                <option value=\"\">Node Source</option>\n                {this.props.graph.nodesArray.map((element, index) => {\n                  return (\n                    <option value={element.id} key={index}>\n                      {element.id}\n                    </option>\n                  );\n                })}\n              </select>\n              <p>{this.state.edge_source_message}</p>\n\n              <label type=\"edge_weight\">Edge Weight</label>\n              <input\n                type=\"number\"\n                name=\"edge_weight\"\n                min=\"0\"\n                onChange={this.handleChange}\n              />\n              <p>{this.state.edge_weight_message}</p>\n              <label type=\"edge_target\">Target Node</label>\n              <select\n                type=\"select\"\n                name=\"edge_target\"\n                onChange={this.handleChange}\n              >\n                <option value=\"\">Node Target</option>\n                {this.props.graph.nodesArray.map((element, index) => {\n                  return (\n                    <option value={element.id} key={index}>\n                      {element.id}\n                    </option>\n                  );\n                })}\n              </select>\n              <p>{this.state.edge_target_message}</p>\n              <button type=\"submit\" onClick={this.handleEdgeSubmit}>\n                Create Edge\n              </button>\n            </form>\n          ) : null}\n        </div>\n\n        <svg id=\"grapher\" width=\"60vw\" height=\"100vh\" />\n      </div>\n    );\n  }\n}\n\nconst mapStateToProps = state => ({\n  graph: state.graph\n});\n\nconst mapDispatchToProps = (dispatch, getState) => ({\n  addNode: newNode => dispatch(Actions.nodeAdder(newNode)),\n  addEdge: newEdge => dispatch(Actions.edgeAdder(newEdge))\n});\n\nexport default connect(\n  mapStateToProps,\n  mapDispatchToProps\n)(Grapher);\n","const nodeAdder = (payload: any) => {\n  return {\n    type: 'GRAPHADDNODE',\n    payload: payload\n  };\n};\n\nconst edgeAdder = (payload: any) => {\n  console.log(payload);\n  return {\n    type: 'GRAPHADDEDGE',\n    payload: payload\n  };\n};\nexport { nodeAdder, edgeAdder };\n","import React, { Component } from 'react';\nimport { HashRouter, Route } from 'react-router-dom';\nimport Home from './components/Home/Home';\nimport Grapher from './components/Grapher/Grapher';\nimport './reset.scss';\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      // What kind of inital state to we need?\n    };\n  }\n\n  componentDidMount() {\n    document.title = 'Timothy Li- Interactive Media';\n  }\n\n  render() {\n    return (\n      <HashRouter>\n        <div>\n          <Route path=\"/\" exact component={Home} />\n          <Route path=\"/grapher\" exact component={Grapher} />\n        </div>\n      </HashRouter>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","export default (store: any) => (next: any) => (action: any) => {\n  console.log('__ACTION__', action);\n  try {\n    let result = next(action);\n    console.log('__STATE__', store.getState());\n    return result;\n  } catch (err) {\n    err.action = action;\n    console.error(err);\n    return err;\n  }\n};\n","let initialState: any = {\n  nodesArray: [],\n  edgesArray: []\n};\n\nexport default (state = initialState, action: any) => {\n  let { type, payload } = action;\n\n  switch (type) {\n    case 'DICTIONARYADDNODE':\n      return {\n        ...state,\n        nodesArray: [...state.nodesArray, payload]\n      };\n    case 'DICTIONARYADDEDGE':\n      console.log(payload);\n      return {\n        ...state,\n        edgesArray: [...state.edgesArray, payload]\n      };\n\n    default:\n      return state;\n  }\n};\n","let initialState: any = {\n  nodesArray: [],\n  edgesArray: []\n};\n\nexport default (state = initialState, action: any) => {\n  let { type, payload } = action;\n\n  switch (type) {\n    case 'GRAPHADDNODE':\n      return {\n        ...state,\n        nodesArray: [...state.nodesArray, payload]\n      };\n\n    case 'GRAPHADDEDGE':\n      console.log(payload);\n      return {\n        ...state,\n        edgesArray: [...state.edgesArray, payload]\n      };\n\n    default:\n      return state;\n  }\n};\n","import { createStore, combineReducers, applyMiddleware } from 'redux';\nimport reporter from './middleware/reporter';\nimport dictionaryReducer from './reducer/dictionaryReducer';\nimport graphReducer from './reducer/graphReducer';\n\nlet reducers = combineReducers({\n  dictionary: dictionaryReducer,\n  graph: graphReducer\n});\n\nexport default () => createStore(reducers, applyMiddleware(reporter));\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport { Provider } from 'react-redux';\nimport * as serviceWorker from './serviceWorker';\nimport createStore from './store/index';\n\nconst store = createStore();\n\nfunction Main() {\n  return (\n    <Provider store={store}>\n      <React.Fragment>\n        <App />\n      </React.Fragment>\n    </Provider>\n  );\n}\n\nReactDOM.render(<Main />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}